/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

eval("const Game = __webpack_require__(/*! ./scripts/game.js */ \"./src/scripts/game.js\");\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const canvasEl = document.getElementById('game-canvas');\n  const game = new Game(canvasEl);\n  game.start();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsSUFBSSxHQUFHQyxtQkFBTyxDQUFDLGdEQUFELENBQXBCOztBQUVBQyxRQUFRLENBQUNDLGdCQUFULENBQTBCLGtCQUExQixFQUE4QyxNQUFNO0VBQ2hELE1BQU1DLFFBQVEsR0FBR0YsUUFBUSxDQUFDRyxjQUFULENBQXdCLGFBQXhCLENBQWpCO0VBQ0EsTUFBTUMsSUFBSSxHQUFHLElBQUlOLElBQUosQ0FBU0ksUUFBVCxDQUFiO0VBQ0FFLElBQUksQ0FBQ0MsS0FBTDtBQUNILENBSkQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYWtlLW1hbi1uZWFyLXlvdS8uL3NyYy9pbmRleC5qcz9iNjM1Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEdhbWUgPSByZXF1aXJlKFwiLi9zY3JpcHRzL2dhbWUuanNcIik7XG5cbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCAoKSA9PiB7XG4gICAgY29uc3QgY2FudmFzRWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZ2FtZS1jYW52YXMnKTtcbiAgICBjb25zdCBnYW1lID0gbmV3IEdhbWUoY2FudmFzRWwpO1xuICAgIGdhbWUuc3RhcnQoKTtcbn0pO1xuIl0sIm5hbWVzIjpbIkdhbWUiLCJyZXF1aXJlIiwiZG9jdW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwiY2FudmFzRWwiLCJnZXRFbGVtZW50QnlJZCIsImdhbWUiLCJzdGFydCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/scripts/TileMap.js":
/*!********************************!*\
  !*** ./src/scripts/TileMap.js ***!
  \********************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("const Cakeman = __webpack_require__(/*! ./cakeman.js */ \"./src/scripts/cakeman.js\");\n\nconst Ghost = __webpack_require__(/*! ./ghost.js */ \"./src/scripts/ghost.js\");\n\nconst PolyTreeNode = __webpack_require__(/*! ./polyTreeNode.js */ \"./src/scripts/polyTreeNode.js\");\n\nconst MovingDirection = __webpack_require__(/*! ./movingDirections.js */ \"./src/scripts/movingDirections.js\");\n\nfunction TileMap(tileSize) {\n  // I used MDN Web Documents Square TileMaps Statis Implementation. \n  // https://developer.mozilla.org/en-US/docs/Games/Techniques/Tilemaps/Square_tilemaps_implementation:_Static_maps\n  this.tileSize = tileSize;\n  this.cakeman = new Image();\n  this.cakeman.src = \"../images/cakemanClosed.png\";\n  this.wall = new Image();\n  this.wall.src = \"../images/wall.png\";\n  this.dot = new Image();\n  this.dot.src = \"../images/dot.png\"; // 1 wall\n  // 0 dots\n  // 2 empty black\n  // 7 cakeman\n  // 3 ghost red\n  // 4 ghost blue\n  // 5 ghost purple\n  // 6 ghost pink\n  // 8 score\n\n  this.tiles = [[9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 1], [1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1], [1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1], [1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 1, 1, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0, 1, 1, 1, 1], [1, 1, 1, 1, 0, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 0, 1, 1, 1, 1], [2, 2, 7, 2, 0, 2, 2, 1, 1, 1, 1, 1, 1, 2, 2, 0, 2, 2, 2, 2], [1, 1, 1, 1, 0, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 0, 1, 1, 1, 1], [1, 1, 1, 1, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0, 1, 1, 1, 1], [1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1], [1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1], [1, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 1], [1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]];\n  this.ghostNode = null;\n}\n\nTileMap.prototype.setCanvas = function setCanvas(canvas) {\n  canvas.width = this.tiles[0].length * this.tileSize;\n  canvas.height = this.tiles.length * this.tileSize;\n};\n\nTileMap.prototype.draw = function (ctx, cakeman) {\n  for (let row = 0; row < this.tiles.length; row++) {\n    for (let column = 0; column < this.tiles[row].length; column++) {\n      let tile = this.tiles[row][column];\n      if (tile === 1) this.drawWall(ctx, column, row, this.tileSize);else if (tile === 0) this.drawDot(ctx, column, row, this.tileSize);else if (tile === 2) {\n        this.drawEmpty(ctx, column, row, this.tileSize);\n      }\n    }\n  }\n\n  ctx.clearRect(0, 0, 480, 24);\n  ctx.font = '16px Comic Sans MS';\n  ctx.fillStyle = 'white';\n  ctx.fillText(`Score: ${cakeman.score}`, 30, 18);\n  ctx.fillText(`Countdown: ${cakeman.timeLeft}`, 360, 18); // if(!cakeman.hasMoved) {\n  //     ctx.font = '16px Comic Sans MS';\n  //     ctx.fillStyle = 'white';\n  //     ctx.fillText('xxxxxxxxx');\n  // }\n  // if(isLost) {\n  //     console.log(isLost);\n  //     // this.gameOverScreen(ctx, cakeman);\n  //     ctx.font = '20px Comic Sans MS';\n  //     ctx.fillStyle = 'white';\n  //     ctx.fillText('Game Over', 185, 296);\n  //     ctx.fillText(`Score: ${cakeman.score}`, 196, 320);\n  // }\n  // if(isWin) {\n  //     this.winScreen(ctx, cakeman);\n  // }\n  // ctx.clearRect(180, 275, 110, 50)\n  // ctx.font = '20px Comic Sans MS';\n  // ctx.fillStyle = 'white';\n  // ctx.fillText('Game Over', 185, 296);\n  // ctx.fillText('Score: ', 196, 320)\n};\n\nTileMap.prototype.drawDot = function (ctx, column, row, size) {\n  ctx.drawImage(this.dot, column * this.tileSize, row * this.tileSize, size, size);\n};\n\nTileMap.prototype.drawWall = function (ctx, column, row, size) {\n  ctx.drawImage(this.wall, column * this.tileSize, row * this.tileSize, size, size);\n};\n\nTileMap.prototype.drawEmpty = function (ctx, column, row, size) {\n  ctx.fillStyle = \"black\";\n  ctx.fillRect(column * this.tileSize, row * this.tileSize, size, size);\n};\n\nTileMap.prototype.getCakeman = function () {\n  for (let row = 0; row < this.tiles.length; row++) {\n    for (let column = 0; column < this.tiles[row].length; column++) {\n      let tile = this.tiles[row][column];\n\n      if (tile === 7) {\n        this.tiles[row][column] = 0;\n        let cakeMan = new Cakeman({\n          position: [column * this.tileSize, row * this.tileSize],\n          size: this.tileSize,\n          tileMap: this\n        });\n        return cakeMan;\n      }\n    }\n  }\n};\n\nTileMap.prototype.getGhost = function () {\n  for (let row = 0; row < this.tiles.length; row++) {\n    for (let column = 0; column < this.tiles[row].length; column++) {\n      let tile = this.tiles[row][column];\n\n      if (tile === 3) {\n        this.tiles[row][column] = 0;\n        let ghost = new Ghost({\n          position: [column * this.tileSize, row * this.tileSize],\n          size: this.tileSize,\n          tileMap: this,\n          id: 3\n        });\n        this.ghostNode = new PolyTreeNode({\n          position: [row, column]\n        });\n        return ghost;\n      } else if (tile === 4) {\n        this.tiles[row][column] = 0;\n        let ghost = new Ghost({\n          position: [column * this.tileSize, row * this.tileSize],\n          size: this.tileSize,\n          tileMap: this,\n          id: 4\n        });\n        return ghost;\n      } else if (tile === 5) {\n        this.tiles[row][column] = 0;\n        let ghost = new Ghost({\n          position: [column * this.tileSize, row * this.tileSize],\n          size: this.tileSize,\n          tileMap: this,\n          id: 5\n        });\n        return ghost;\n      } else if (tile === 6) {\n        this.tiles[row][column] = 0;\n        let ghost = new Ghost({\n          position: [column * this.tileSize, row * this.tileSize],\n          size: this.tileSize,\n          tileMap: this,\n          id: 6\n        });\n        return ghost;\n      }\n    }\n  }\n};\n\nTileMap.prototype.didCollidedWithEnv = function (x, y, direction) {\n  if (typeof direction === null) return;\n\n  if (Number.isInteger(x / this.tileSize) && Number.isInteger(y / this.tileSize)) {\n    let column = 0;\n    let row = 0;\n    let nextColumn = 0;\n    let nextRow = 0;\n\n    switch (direction) {\n      case MovingDirection.right:\n        nextColumn = x + this.tileSize;\n        column = nextColumn / this.tileSize;\n        row = y / this.tileSize;\n        break;\n\n      case MovingDirection.left:\n        nextColumn = x - this.tileSize;\n        column = nextColumn / this.tileSize;\n        row = y / this.tileSize;\n        break;\n\n      case MovingDirection.up:\n        nextRow = y - this.tileSize;\n        row = nextRow / this.tileSize;\n        column = x / this.tileSize;\n        break;\n\n      case MovingDirection.down:\n        nextRow = y + this.tileSize;\n        row = nextRow / this.tileSize;\n        column = x / this.tileSize;\n        break;\n    }\n\n    const tile = this.tiles[row][column];\n    if (tile === 1) return true;\n  }\n\n  return false;\n};\n\nTileMap.prototype.removeDot = function removeDot(x, y) {\n  const row = y / this.tileSize;\n  const column = x / this.tileSize;\n\n  if (Number.isInteger(row) && Number.isInteger(column)) {\n    if (this.tiles[row][column] === 0) {\n      this.tiles[row][column] = 2;\n      return true;\n    }\n  }\n\n  return false;\n};\n\nTileMap.prototype.buildTree = function buildTree(ghost, cakeman) {\n  let i = 0;\n  let ghostX = Math.floor(ghost.x / 24);\n  let ghostY = Math.floor(ghost.y / 24);\n  let inputGhostNode = new PolyTreeNode({\n    position: [ghostX, ghostY]\n  });\n  let cakemanX = Math.floor(cakeman.x / 24);\n  let cakemanY = Math.floor(cakeman.y / 24);\n  let queue = [];\n  queue.push(inputGhostNode);\n  let isFound = false;\n  let visitedNodes = [];\n\n  while (queue.length && !isFound) {\n    let currentNode = queue.shift();\n    let x = currentNode.x;\n    let y = currentNode.y; // console.log(`x: ${x} vs y: ${y}`);\n    // return;\n\n    if (this.tiles[x + 1][y] !== 1) {\n      var child = new PolyTreeNode({\n        position: [x + 1, y]\n      });\n\n      if (!visitedNodes.includes(child)) {\n        queue.push(child);\n        visitedNodes.push(child);\n        currentNode.addChild(child);\n        child.assignParent(currentNode);\n\n        if (x + 1 === cakemanX && y === cakemanY) {\n          isFound = true;\n          break;\n        }\n      }\n    }\n\n    if (this.tiles[x][y + 1] !== 1) {\n      var child = new PolyTreeNode({\n        position: [x, y + 1]\n      });\n\n      if (!visitedNodes.includes(child)) {\n        queue.push(child);\n        visitedNodes.push(child);\n        currentNode.addChild(child);\n        child.assignParent(currentNode);\n\n        if (x === cakemanX && y + 1 === cakemanY) {\n          isFound = true;\n          break;\n        }\n      }\n    }\n\n    if (this.tiles[x - 1][y] !== 1) {\n      var child = new PolyTreeNode({\n        position: [x - 1, y]\n      });\n\n      if (!visitedNodes.includes(child)) {\n        queue.push(child);\n        visitedNodes.push(child);\n        currentNode.addChild(child);\n        child.assignParent(currentNode);\n\n        if (x - 1 === cakemanX && y === cakemanY) {\n          isFound = true;\n          break;\n        }\n      }\n    }\n\n    if (this.tiles[x][y - 1] !== 1) {\n      var child = new PolyTreeNode({\n        position: [x, y - 1]\n      });\n\n      if (!visitedNodes.includes(child)) {\n        queue.push(child);\n        visitedNodes.push(child);\n        currentNode.addChild(child);\n        child.assignParent(currentNode);\n\n        if (x === cakemanX && y - 1 === cakemanY) {\n          isFound = true;\n          break;\n        }\n      }\n    }\n\n    i += 1;\n\n    if (i === 100) {\n      // console.log(queue);\n      return 777;\n    }\n  }\n\n  let cakemanNode = visitedNodes[visitedNodes.length - 1];\n  let backToGhostArr = [cakemanNode]; // console.log(cakemanNode.parent);\n  // return;\n\n  var node = cakemanNode;\n\n  while (node.parent !== inputGhostNode) {\n    backToGhostArr.push(node);\n    node = node.parent;\n  }\n\n  let nextMoveNode = backToGhostArr[backToGhostArr.length - 1];\n\n  if (nextMoveNode.x === inputGhostNode.x) {\n    if (nextMoveNode.y >= inputGhostNode.y) {\n      return MovingDirection.down;\n    } else return MovingDirection.up;\n  }\n\n  if (nextMoveNode.y === inputGhostNode.y) {\n    if (nextMoveNode.x >= inputGhostNode.x) {\n      return MovingDirection.right;\n    } else return MovingDirection.left;\n  }\n};\n\nTileMap.prototype.gameOverScreen = function (ctx, cakeman) {\n  // ctx.clearRect(180, 275, 110, 50);\n  ctx.font = '20px Comic Sans MS';\n  ctx.fillStyle = 'white';\n  ctx.fillText('Game Over', 185, 296);\n  ctx.fillText(`Score: ${cakeman.score}`, 196, 320); // return true;\n};\n\nTileMap.prototype.winScreen = function (ctx, cakeman) {\n  // ctx.clearRect(180, 275, 110, 50);\n  ctx.font = '20px Comic Sans MS';\n  ctx.fillStyle = 'white';\n  ctx.fillText('You win!', 185, 296);\n  ctx.fillText(`Score: ${cakeman.score}`, 196, 320); // return true;\n};\n\nmodule.exports = TileMap;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/TileMap.js\n");

/***/ }),

/***/ "./src/scripts/cakeman.js":
/*!********************************!*\
  !*** ./src/scripts/cakeman.js ***!
  \********************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("const MovingDirection = __webpack_require__(/*! ./movingDirections.js */ \"./src/scripts/movingDirections.js\");\n\nfunction Cakeman(options) {\n  this.x = options.position[0];\n  this.y = options.position[1];\n  this.tileSize = options.size;\n  this.velocity = 2;\n  this.tileMap = options.tileMap;\n  this.currentMovingDirection = null;\n  this.requestedMovingDirection = null;\n  this.animateTimer = null;\n  this.animateDefault = 10;\n  this.rotation = {\n    right: 0,\n    down: 1,\n    left: 2,\n    up: 3\n  };\n  this.cakemanRotation = this.rotation.right;\n  this.dotsLeft = 0;\n  this.hasMoved = false;\n  this.score = 0;\n  this.timeLeft = 120;\n  document.addEventListener(\"keydown\", this.keydown.bind(this));\n  this.loadCakemanImages();\n}\n\nCakeman.prototype.draw = function (ctx) {\n  this.move();\n  this.animate();\n  this.removeDot(); // https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Transformations\n\n  let size = this.tileSize / 2;\n  ctx.save();\n  ctx.translate(this.x + size, this.y + size);\n  ctx.rotate(this.cakemanRotation * 90 * Math.PI / 180);\n  ctx.drawImage(this.cakemanImages[this.cakemanImageIndex], -size, -size, this.tileSize, this.tileSize);\n  ctx.restore(); // ctx.drawImage(\n  //     this.cakemanImages[this.cakemanImageIndex],\n  //     this.x,\n  //     this.y,\n  //     this.tileSize,\n  //     this.tileSize\n  // )\n};\n\nCakeman.prototype.timer = function timer() {\n  let countdown = setInterval(ele => {\n    if (this.timeLeft < 0) clearInterval(countdown);\n    this.timeLeft -= 1;\n  }, 1000);\n};\n\nCakeman.prototype.move = function () {\n  if (this.currentMovingDirection !== this.requestedMovingDirection) {\n    if (Number.isInteger(this.x / this.tileSize) && Number.isInteger(this.y / this.tileSize)) {\n      if (!this.tileMap.didCollidedWithEnv(this.x, this.y, this.requestedMovingDirection)) this.currentMovingDirection = this.requestedMovingDirection;\n    }\n  }\n\n  if (this.tileMap.didCollidedWithEnv(this.x, this.y, this.currentMovingDirection)) {\n    this.animateTimer = null;\n    this.cakemanImageIndex = 0;\n    return;\n  } else if (this.currentMovingDirection && !this.animateTimer) {\n    this.animateTimer = this.animateDefault;\n  }\n\n  switch (this.currentMovingDirection) {\n    case MovingDirection.up:\n      this.y -= this.velocity;\n      this.cakemanRotation = this.rotation.up;\n      break;\n\n    case MovingDirection.down:\n      this.y += this.velocity;\n      this.cakemanRotation = this.rotation.down;\n      break;\n\n    case MovingDirection.left:\n      this.x -= this.velocity;\n      if (this.x < 12) this.x = 23 * this.tileMap.tiles[0].length;\n      this.cakemanRotation = this.rotation.left;\n      break;\n\n    case MovingDirection.right:\n      this.x += this.velocity;\n      if (this.x >= this.tileMap.tiles[0].length * 23) this.x = 0;\n      this.cakemanRotation = this.rotation.right;\n      break;\n  }\n};\n\nCakeman.prototype.loadCakemanImages = function () {\n  const cakemanImg1 = new Image();\n  cakemanImg1.src = \"../images/cakemanClosed.png\";\n  const cakemanImg2 = new Image();\n  cakemanImg2.src = \"../images/cakemanHalfOpen.png\";\n  const cakemanImg3 = new Image();\n  cakemanImg3.src = \"../images/cakemanFullOpen.png\";\n  const cakemanImg4 = new Image();\n  cakemanImg4.src = \"../images/cakemanHalfOpen.png\";\n  this.cakemanImages = [cakemanImg1, cakemanImg2, cakemanImg3, cakemanImg4];\n  this.cakemanImageIndex = 0;\n};\n\nCakeman.prototype.keydown = function (event) {\n  const arr = [38, 40, 37, 39]; // if(event.keyCode === 32) this.timer();\n\n  if (arr.includes(event.keyCode)) {\n    this.hasMoved = true; // this.timer();\n  } // up key\n\n\n  if (event.keyCode === 38) {\n    if (this.currentMovingDirection === MovingDirection.down) {\n      this.currentMovingDirection = MovingDirection.up;\n    }\n\n    this.requestedMovingDirection = MovingDirection.up;\n  } // down\n\n\n  if (event.keyCode === 40) {\n    if (this.currentMovingDirection === MovingDirection.up) {\n      this.currentMovingDirection = MovingDirection.down;\n    }\n\n    this.requestedMovingDirection = MovingDirection.down;\n  } // 37 left\n\n\n  if (event.keyCode === 37) {\n    if (this.currentMovingDirection === MovingDirection.right) {\n      this.currentMovingDirection = MovingDirection.left;\n    }\n\n    this.requestedMovingDirection = MovingDirection.left;\n  } // 39 right\n\n\n  if (event.keyCode === 39) {\n    if (this.currentMovingDirection === MovingDirection.left) {\n      this.currentMovingDirection = MovingDirection.right;\n    }\n\n    this.requestedMovingDirection = MovingDirection.right;\n  }\n};\n\nCakeman.prototype.animate = function animate() {\n  if (!this.animateTimer) {\n    return;\n  }\n\n  this.animateTimer -= 1;\n\n  if (this.animateTimer === 0) {\n    this.animateTimer = this.animateDefault;\n    this.cakemanImageIndex += 1;\n\n    if (this.cakemanImageIndex === this.cakemanImages.length) {\n      this.cakemanImageIndex = 0;\n    }\n  }\n};\n\nCakeman.prototype.removeDot = function removeDot() {\n  if (this.tileMap.removeDot(this.x, this.y)) {\n    this.score += 1;\n  }\n};\n\nmodule.exports = Cakeman;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/cakeman.js\n");

/***/ }),

/***/ "./src/scripts/game.js":
/*!*****************************!*\
  !*** ./src/scripts/game.js ***!
  \*****************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("const TileMap = __webpack_require__(/*! ./TileMap */ \"./src/scripts/TileMap.js\");\n\nconst Cakeman = __webpack_require__(/*! ./cakeman.js */ \"./src/scripts/cakeman.js\");\n\nfunction Game(canvas) {\n  this.canvas = canvas;\n  this.ctx = this.canvas.getContext(\"2d\");\n  this.tileSize = 24;\n  this.velocity = 2; // this.tileMap = new TileMap(this.tileSize);\n  // this.cakeman = this.tileMap.getCakeman();\n  // this.ghost = this.tileMap.getGhost();\n  // this.blueGhost = this.tileMap.getGhost();\n  // this.purpleGhost = this.tileMap.getGhost();\n  // this.pinkGhost = this.tileMap.getGhost(); \n  // this.setCanvasSize();\n}\n\n;\n\nGame.prototype.setCanvasSize = function setCanvasSize() {\n  this.tileMap.setCanvas(this.canvas);\n};\n\nGame.prototype.start = function () {\n  this.tileMap = new TileMap(this.tileSize);\n  this.cakeman = this.tileMap.getCakeman();\n  this.ghost = this.tileMap.getGhost();\n  this.blueGhost = this.tileMap.getGhost();\n  this.purpleGhost = this.tileMap.getGhost();\n  this.pinkGhost = this.tileMap.getGhost();\n  this.setCanvasSize();\n  this.myInterval = setInterval(this.gameIter.bind(this), 1000 / 60);\n  this.cakeman.timer(); // setInterval(this.gameIter.bind(this), 1000/60);\n};\n\nGame.prototype.stop = function () {\n  clearInterval(this.myInterval);\n};\n\nGame.prototype.gameIter = function () {\n  // console.log(`cakeman.x: ${this.cakeman.x}, ${this.cakeman.y} ghost x: ${this.ghost.x}, ${this.ghost.y}`);\n  // console.log(`ghost.moving direction: ${this.ghost.movingDirection}`);\n  if (!this.isLost()) {\n    this.tileMap.draw(this.ctx, this.cakeman);\n    this.cakeman.draw(this.ctx);\n    this.ghost.draw(this.ctx, this.pause(), this.cakeman);\n    this.blueGhost.draw(this.ctx, this.pause(), this.cakeman);\n    this.purpleGhost.draw(this.ctx, this.pause(), this.cakeman);\n    this.pinkGhost.draw(this.ctx, this.pause(), this.cakeman);\n  } // else this.start();\n\n};\n\nGame.prototype.pause = function pause() {\n  return !this.cakeman.hasMoved;\n};\n\nGame.prototype.isLost = function isLost() {\n  // 2d Detection Collision on mozilla\n  // https://developer.mozilla.org/en-US/docs/Games/Techniques/2D_collision_detection\n  if (this.cakeman.x < this.ghost.x + 16 && this.cakeman.x + 16 > this.ghost.x && this.cakeman.y < this.ghost.y + 16 && 16 + this.cakeman.y > this.ghost.y || this.cakeman.x < this.blueGhost.x + 16 && this.cakeman.x + 16 > this.blueGhost.x && this.cakeman.y < this.blueGhost.y + 16 && 16 + this.cakeman.y > this.blueGhost.y || this.cakeman.x < this.purpleGhost.x + 16 && this.cakeman.x + 16 > this.purpleGhost.x && this.cakeman.y < this.purpleGhost.y + 16 && 16 + this.cakeman.y > this.purpleGhost.y || this.cakeman.x < this.pinkGhost.x + 16 && this.cakeman.x + 16 > this.pinkGhost.x && this.cakeman.y < this.pinkGhost.y + 16 && 16 + this.cakeman.y > this.pinkGhost.y || this.cakeman.timeLeft <= -1) {\n    this.tileMap.gameOverScreen(this.ctx, this.cakeman); // this.stop();\n    // this.start();\n\n    setTimeout(() => location.reload(), 7000); // location.reload();\n\n    return true;\n  }\n\n  return false;\n}; // Game.prototype.isWin = function isWin() {\n//     let remainingDots = this.tileMap.tiles.flat().filter(v => v === 0).length;\n//     if(remainingDots === 0) {\n//         return true;     \n//     }\n//     return false;\n// }\n\n\nmodule.exports = Game;\nwindow.Game = Game;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/game.js\n");

/***/ }),

/***/ "./src/scripts/ghost.js":
/*!******************************!*\
  !*** ./src/scripts/ghost.js ***!
  \******************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("const MovingDirection = __webpack_require__(/*! ./movingDirections.js */ \"./src/scripts/movingDirections.js\");\n\nconst Util = __webpack_require__(/*! ./utils.js */ \"./src/scripts/utils.js\");\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n;\n\nfunction Ghost(options) {\n  this.x = options.position[0];\n  this.y = options.position[1];\n  this.tileSize = options.size;\n  this.velocity = 2;\n  this.tileMap = options.tileMap;\n  this.id = options.id;\n  this.movingDirection = getRandomInt(1, 4); // initial random is fine\n\n  this.loadGhostImage();\n}\n\nGhost.prototype.draw = function draw(ctx, pause, cakeman) {\n  if (!pause) {\n    this.changeDirection(cakeman);\n    this.move(cakeman);\n  }\n\n  ctx.drawImage(this.ghostImage, this.x, this.y, this.tileSize, this.tileSize);\n};\n\nGhost.prototype.mockMove = function mockMove(suggestedDirection) {\n  let x = null;\n  let y = null;\n\n  if (!this.tileMap.didCollidedWithEnv(this.x, this.y, suggestedDirection)) {\n    if (suggestedDirection === MovingDirection.up) {\n      y = this.y - this.velocity;\n      return [this.x, y];\n    } else if (suggestedDirection === MovingDirection.down) {\n      y = this.y + this.velocity;\n      return [this.x, y];\n    } else if (suggestedDirection === MovingDirection.right) {\n      x = this.x + this.velocity;\n      return [x, this.y];\n    } else {\n      x = this.x - this.velocity;\n      return [x, this.y];\n    }\n  }\n};\n\nGhost.prototype.move = function move(cakeman) {\n  if (!this.tileMap.didCollidedWithEnv(this.x, this.y, this.movingDirection)) {\n    switch (this.movingDirection) {\n      case MovingDirection.up:\n        this.y -= this.velocity;\n        break;\n\n      case MovingDirection.down:\n        this.y += this.velocity;\n        break;\n\n      case MovingDirection.left:\n        this.x -= this.velocity;\n        if (this.x < 12) this.x = 23 * this.tileMap.tiles[0].length;\n        break;\n\n      case MovingDirection.right:\n        this.x += this.velocity;\n        if (this.x >= this.tileMap.tiles[0].length * 23) this.x = 0;\n        break;\n    }\n  }\n};\n\nGhost.prototype.changeDirection = function changeDirection(cakeman) {\n  let newMoveDirection = null;\n  let newMoveDirectionName = null;\n  let possibleDirections = [];\n\n  if (this.x % this.tileSize === 0 && this.y % this.tileSize === 0) {\n    for (let i = 1; i < 5; i++) {\n      if (!this.tileMap.didCollidedWithEnv(this.x, this.y, i)) {\n        let distance = Util.dist(this.mockMove(i), [cakeman.x, cakeman.y]);\n        possibleDirections.push(i);\n      }\n    }\n\n    possibleDirections = possibleDirections.filter(item => item !== 5 - this.movingDirection);\n\n    if (getRandomInt(1, 2, 3, 4) < 3) {\n      newMoveDirection = possibleDirections[Math.floor(Math.random() * possibleDirections.length)];\n    } else newMoveDirection = Util.findDirectionForGhost(this, cakeman, this.tileMap);\n\n    this.movingDirection = newMoveDirection; // if((this.x % this.tileSize === 0) && (this.y % this.tileSize === 0) && this.id === 3) {\n    //     let nextmoveDirection = this.tileMap.buildTree(this, cakeman);\n    //     // console.log(nextmoveDirection);\n    //     if(nextmoveDirection !== 777) this.movingDirection = nextmoveDirection;\n    // }\n  }\n};\n\nGhost.prototype.loadGhostImage = function draw() {\n  this.ghostImage = new Image();\n\n  if (this.id === 3) {\n    this.ghostImage.src = \"../images/redGhost.png\";\n  } else if (this.id === 4) {\n    this.ghostImage.src = \"../images/blueGhost.png\";\n  } else if (this.id === 5) {\n    this.ghostImage.src = \"../images/purpleGhost.png\";\n  } else if (this.id === 6) {\n    this.ghostImage.src = \"../images/pinkGhost.png\";\n  }\n};\n\nmodule.exports = Ghost;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Qjs7SUFFUCxLQUFLRSxlQUFMLEdBQXVCb0IsZ0JBQXZCLENBZGlFLENBZ0JqRTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0VBQ0g7QUFDSixDQTNCRDs7QUE2QkE5QixLQUFLLENBQUNZLFNBQU4sQ0FBZ0JELGNBQWhCLEdBQWlDLFNBQVNFLElBQVQsR0FBZ0I7RUFDN0MsS0FBS08sVUFBTCxHQUFrQixJQUFJb0IsS0FBSixFQUFsQjs7RUFDQSxJQUFHLEtBQUsvQixFQUFMLEtBQVksQ0FBZixFQUFrQjtJQUNkLEtBQUtXLFVBQUwsQ0FBZ0JxQixHQUFoQixHQUF1Qix3QkFBdkI7RUFDSCxDQUZELE1BRU8sSUFBRyxLQUFLaEMsRUFBTCxLQUFZLENBQWYsRUFBa0I7SUFDckIsS0FBS1csVUFBTCxDQUFnQnFCLEdBQWhCLEdBQXVCLHlCQUF2QjtFQUNILENBRk0sTUFFQSxJQUFHLEtBQUtoQyxFQUFMLEtBQVksQ0FBZixFQUFrQjtJQUNyQixLQUFLVyxVQUFMLENBQWdCcUIsR0FBaEIsR0FBdUIsMkJBQXZCO0VBQ0gsQ0FGTSxNQUVBLElBQUcsS0FBS2hDLEVBQUwsS0FBWSxDQUFmLEVBQWtCO0lBQ3JCLEtBQUtXLFVBQUwsQ0FBZ0JxQixHQUFoQixHQUF1Qix5QkFBdkI7RUFDSDtBQUNKLENBWEQ7O0FBWUFDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjNDLEtBQWpCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2FrZS1tYW4tbmVhci15b3UvLi9zcmMvc2NyaXB0cy9naG9zdC5qcz81Y2NlIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IE1vdmluZ0RpcmVjdGlvbiA9IHJlcXVpcmUoXCIuL21vdmluZ0RpcmVjdGlvbnMuanNcIik7XG5jb25zdCBVdGlsID0gcmVxdWlyZShcIi4vdXRpbHMuanNcIik7XG5cbmZ1bmN0aW9uIGdldFJhbmRvbUludChtaW4sIG1heCkge1xuICAgIG1pbiA9IE1hdGguY2VpbChtaW4pO1xuICAgIG1heCA9IE1hdGguZmxvb3IobWF4KTtcbiAgICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbiArIDEpKSArIG1pbjtcbn07XG5cbmZ1bmN0aW9uIEdob3N0KG9wdGlvbnMpIHsgXG4gICAgdGhpcy54ID0gb3B0aW9ucy5wb3NpdGlvblswXTtcbiAgICB0aGlzLnkgPSBvcHRpb25zLnBvc2l0aW9uWzFdO1xuICAgIHRoaXMudGlsZVNpemUgPSBvcHRpb25zLnNpemU7XG4gICAgdGhpcy52ZWxvY2l0eSA9IDI7XG4gICAgdGhpcy50aWxlTWFwID0gb3B0aW9ucy50aWxlTWFwO1xuICAgIHRoaXMuaWQgPSBvcHRpb25zLmlkXG5cbiAgICB0aGlzLm1vdmluZ0RpcmVjdGlvbiA9IGdldFJhbmRvbUludCgxLCA0KTsgLy8gaW5pdGlhbCByYW5kb20gaXMgZmluZVxuXG4gICAgdGhpcy5sb2FkR2hvc3RJbWFnZSgpO1xufVxuXG5HaG9zdC5wcm90b3R5cGUuZHJhdyA9IGZ1bmN0aW9uIGRyYXcoY3R4LCBwYXVzZSwgY2FrZW1hbikge1xuICAgIGlmKCFwYXVzZSkge1xuICAgICAgICB0aGlzLmNoYW5nZURpcmVjdGlvbihjYWtlbWFuKTtcbiAgICAgICAgdGhpcy5tb3ZlKGNha2VtYW4pO1xuICAgIH1cbiAgICBjdHguZHJhd0ltYWdlKFxuICAgICAgICB0aGlzLmdob3N0SW1hZ2UsXG4gICAgICAgIHRoaXMueCxcbiAgICAgICAgdGhpcy55LFxuICAgICAgICB0aGlzLnRpbGVTaXplLFxuICAgICAgICB0aGlzLnRpbGVTaXplXG4gICAgKTtcbn07XG5cbkdob3N0LnByb3RvdHlwZS5tb2NrTW92ZSA9IGZ1bmN0aW9uIG1vY2tNb3ZlKHN1Z2dlc3RlZERpcmVjdGlvbikge1xuICAgIGxldCB4ID0gbnVsbDtcbiAgICBsZXQgeSA9IG51bGw7XG4gICAgaWYoIXRoaXMudGlsZU1hcC5kaWRDb2xsaWRlZFdpdGhFbnYodGhpcy54LCB0aGlzLnksIHN1Z2dlc3RlZERpcmVjdGlvbikpIHtcbiAgICAgICAgaWYoc3VnZ2VzdGVkRGlyZWN0aW9uID09PSBNb3ZpbmdEaXJlY3Rpb24udXApIHtcbiAgICAgICAgICAgIHkgPSB0aGlzLnkgLSB0aGlzLnZlbG9jaXR5O1xuICAgICAgICAgICAgcmV0dXJuIFt0aGlzLngsIHldOyBcbiAgICAgICAgfSBlbHNlIGlmKHN1Z2dlc3RlZERpcmVjdGlvbiA9PT0gTW92aW5nRGlyZWN0aW9uLmRvd24pIHtcbiAgICAgICAgICAgIHkgPSB0aGlzLnkgKyB0aGlzLnZlbG9jaXR5O1xuICAgICAgICAgICAgcmV0dXJuIFt0aGlzLngsIHldO1xuICAgICAgICB9IGVsc2UgaWYoc3VnZ2VzdGVkRGlyZWN0aW9uID09PSBNb3ZpbmdEaXJlY3Rpb24ucmlnaHQpIHtcbiAgICAgICAgICAgIHggPSB0aGlzLnggKyB0aGlzLnZlbG9jaXR5O1xuICAgICAgICAgICAgcmV0dXJuIFt4LCB0aGlzLnldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgeCA9IHRoaXMueCAtIHRoaXMudmVsb2NpdHk7XG4gICAgICAgICAgICByZXR1cm4gW3gsIHRoaXMueV07XG4gICAgICAgIH1cbiAgICB9XG59XG5cbkdob3N0LnByb3RvdHlwZS5tb3ZlID0gZnVuY3Rpb24gbW92ZShjYWtlbWFuKSB7XG4gICAgaWYoIXRoaXMudGlsZU1hcC5kaWRDb2xsaWRlZFdpdGhFbnYodGhpcy54LCB0aGlzLnksIHRoaXMubW92aW5nRGlyZWN0aW9uKSkge1xuICAgICAgICBzd2l0Y2godGhpcy5tb3ZpbmdEaXJlY3Rpb24pIHtcbiAgICAgICAgICAgIGNhc2UgTW92aW5nRGlyZWN0aW9uLnVwOlxuICAgICAgICAgICAgdGhpcy55IC09IHRoaXMudmVsb2NpdHk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY2FzZSBNb3ZpbmdEaXJlY3Rpb24uZG93bjpcbiAgICAgICAgICAgIHRoaXMueSArPSB0aGlzLnZlbG9jaXR5O1xuICAgICAgICAgICAgYnJlYWs7IFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBjYXNlIE1vdmluZ0RpcmVjdGlvbi5sZWZ0OlxuICAgICAgICAgICAgdGhpcy54IC09IHRoaXMudmVsb2NpdHk7XG4gICAgICAgICAgICBpZih0aGlzLnggPCAxMikgdGhpcy54ID0gMjMgKiB0aGlzLnRpbGVNYXAudGlsZXNbMF0ubGVuZ3RoO1xuICAgICAgICAgICAgYnJlYWs7IFxuICAgIFxuICAgICAgICAgICAgY2FzZSBNb3ZpbmdEaXJlY3Rpb24ucmlnaHQ6XG4gICAgICAgICAgICB0aGlzLnggKz0gdGhpcy52ZWxvY2l0eTtcbiAgICAgICAgICAgIGlmKHRoaXMueCA+PSB0aGlzLnRpbGVNYXAudGlsZXNbMF0ubGVuZ3RoICogMjMpIHRoaXMueD0wO1xuICAgICAgICAgICAgYnJlYWs7IFxuICAgICAgICB9XG4gICAgfSBcbn1cblxuR2hvc3QucHJvdG90eXBlLmNoYW5nZURpcmVjdGlvbiA9IGZ1bmN0aW9uIGNoYW5nZURpcmVjdGlvbihjYWtlbWFuKSB7XG4gICAgbGV0IG5ld01vdmVEaXJlY3Rpb24gPSBudWxsO1xuICAgIGxldCBuZXdNb3ZlRGlyZWN0aW9uTmFtZSA9IG51bGw7XG4gICAgbGV0IHBvc3NpYmxlRGlyZWN0aW9ucyA9IFtdO1xuXG4gICAgaWYoKHRoaXMueCAlIHRoaXMudGlsZVNpemUgPT09IDApICYmICh0aGlzLnkgJSB0aGlzLnRpbGVTaXplID09PSAwKSkge1xuICAgICAgICBmb3IobGV0IGk9MTsgaTw1OyBpKyspIHtcbiAgICAgICAgICAgIGlmKCF0aGlzLnRpbGVNYXAuZGlkQ29sbGlkZWRXaXRoRW52KHRoaXMueCwgdGhpcy55LCBpKSl7XG4gICAgICAgICAgICAgICAgbGV0IGRpc3RhbmNlID0gVXRpbC5kaXN0KHRoaXMubW9ja01vdmUoaSksIFtjYWtlbWFuLngsIGNha2VtYW4ueV0pO1xuICAgICAgICAgICAgICAgIHBvc3NpYmxlRGlyZWN0aW9ucy5wdXNoKGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBwb3NzaWJsZURpcmVjdGlvbnMgPSBwb3NzaWJsZURpcmVjdGlvbnMuZmlsdGVyKGl0ZW0gPT4gaXRlbSAhPT0gNS10aGlzLm1vdmluZ0RpcmVjdGlvbik7XG5cbiAgICAgICAgaWYoZ2V0UmFuZG9tSW50KDEsMiwzLDQpPDMpIHtcbiAgICAgICAgICAgIG5ld01vdmVEaXJlY3Rpb24gPSBwb3NzaWJsZURpcmVjdGlvbnNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKnBvc3NpYmxlRGlyZWN0aW9ucy5sZW5ndGgpXTtcbiAgICAgICAgfSBlbHNlIG5ld01vdmVEaXJlY3Rpb24gPSBVdGlsLmZpbmREaXJlY3Rpb25Gb3JHaG9zdCh0aGlzLCBjYWtlbWFuLCB0aGlzLnRpbGVNYXApO1xuICAgICAgICBcbiAgICAgICAgdGhpcy5tb3ZpbmdEaXJlY3Rpb24gPSBuZXdNb3ZlRGlyZWN0aW9uO1xuXG4gICAgICAgIC8vIGlmKCh0aGlzLnggJSB0aGlzLnRpbGVTaXplID09PSAwKSAmJiAodGhpcy55ICUgdGhpcy50aWxlU2l6ZSA9PT0gMCkgJiYgdGhpcy5pZCA9PT0gMykge1xuICAgICAgICAvLyAgICAgbGV0IG5leHRtb3ZlRGlyZWN0aW9uID0gdGhpcy50aWxlTWFwLmJ1aWxkVHJlZSh0aGlzLCBjYWtlbWFuKTtcbiAgICAgICAgLy8gICAgIC8vIGNvbnNvbGUubG9nKG5leHRtb3ZlRGlyZWN0aW9uKTtcbiAgICAgICAgLy8gICAgIGlmKG5leHRtb3ZlRGlyZWN0aW9uICE9PSA3NzcpIHRoaXMubW92aW5nRGlyZWN0aW9uID0gbmV4dG1vdmVEaXJlY3Rpb247XG4gICAgICAgIC8vIH1cbiAgICB9XG59XG5cbkdob3N0LnByb3RvdHlwZS5sb2FkR2hvc3RJbWFnZSA9IGZ1bmN0aW9uIGRyYXcoKSB7XG4gICAgdGhpcy5naG9zdEltYWdlID0gbmV3IEltYWdlKCk7XG4gICAgaWYodGhpcy5pZCA9PT0gMykge1xuICAgICAgICB0aGlzLmdob3N0SW1hZ2Uuc3JjID0gKFwiLi4vaW1hZ2VzL3JlZEdob3N0LnBuZ1wiKTtcbiAgICB9IGVsc2UgaWYodGhpcy5pZCA9PT0gNCkge1xuICAgICAgICB0aGlzLmdob3N0SW1hZ2Uuc3JjID0gKFwiLi4vaW1hZ2VzL2JsdWVHaG9zdC5wbmdcIik7XG4gICAgfSBlbHNlIGlmKHRoaXMuaWQgPT09IDUpIHtcbiAgICAgICAgdGhpcy5naG9zdEltYWdlLnNyYyA9IChcIi4uL2ltYWdlcy9wdXJwbGVHaG9zdC5wbmdcIik7XG4gICAgfSBlbHNlIGlmKHRoaXMuaWQgPT09IDYpIHtcbiAgICAgICAgdGhpcy5naG9zdEltYWdlLnNyYyA9IChcIi4uL2ltYWdlcy9waW5rR2hvc3QucG5nXCIpO1xuICAgIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gR2hvc3Q7Il0sIm5hbWVzIjpbIk1vdmluZ0RpcmVjdGlvbiIsInJlcXVpcmUiLCJVdGlsIiwiZ2V0UmFuZG9tSW50IiwibWluIiwibWF4IiwiTWF0aCIsImNlaWwiLCJmbG9vciIsInJhbmRvbSIsIkdob3N0Iiwib3B0aW9ucyIsIngiLCJwb3NpdGlvbiIsInkiLCJ0aWxlU2l6ZSIsInNpemUiLCJ2ZWxvY2l0eSIsInRpbGVNYXAiLCJpZCIsIm1vdmluZ0RpcmVjdGlvbiIsImxvYWRHaG9zdEltYWdlIiwicHJvdG90eXBlIiwiZHJhdyIsImN0eCIsInBhdXNlIiwiY2FrZW1hbiIsImNoYW5nZURpcmVjdGlvbiIsIm1vdmUiLCJkcmF3SW1hZ2UiLCJnaG9zdEltYWdlIiwibW9ja01vdmUiLCJzdWdnZXN0ZWREaXJlY3Rpb24iLCJkaWRDb2xsaWRlZFdpdGhFbnYiLCJ1cCIsImRvd24iLCJyaWdodCIsImxlZnQiLCJ0aWxlcyIsImxlbmd0aCIsIm5ld01vdmVEaXJlY3Rpb24iLCJuZXdNb3ZlRGlyZWN0aW9uTmFtZSIsInBvc3NpYmxlRGlyZWN0aW9ucyIsImkiLCJkaXN0YW5jZSIsImRpc3QiLCJwdXNoIiwiZmlsdGVyIiwiaXRlbSIsImZpbmREaXJlY3Rpb25Gb3JHaG9zdCIsIkltYWdlIiwic3JjIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/scripts/ghost.js\n");

/***/ }),

/***/ "./src/scripts/movingDirections.js":
/*!*****************************************!*\
  !*** ./src/scripts/movingDirections.js ***!
  \*****************************************/
/***/ (function(module) {

eval("const MovingDirection = {\n  up: 4,\n  // avoid using 0\n  down: 1,\n  left: 2,\n  right: 3\n};\nmodule.exports = MovingDirection;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc2NyaXB0cy9tb3ZpbmdEaXJlY3Rpb25zLmpzLmpzIiwibmFtZXMiOlsiTW92aW5nRGlyZWN0aW9uIiwidXAiLCJkb3duIiwibGVmdCIsInJpZ2h0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2FrZS1tYW4tbmVhci15b3UvLi9zcmMvc2NyaXB0cy9tb3ZpbmdEaXJlY3Rpb25zLmpzPzRjYmMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgTW92aW5nRGlyZWN0aW9uID0ge1xuICAgIHVwOiA0LCAvLyBhdm9pZCB1c2luZyAwXG4gICAgZG93bjogMSxcbiAgICBsZWZ0OiAyLFxuICAgIHJpZ2h0OiAzLFxuICB9O1xuICBcbm1vZHVsZS5leHBvcnRzID0gTW92aW5nRGlyZWN0aW9uOyJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsZUFBZSxHQUFHO0VBQ3BCQyxFQUFFLEVBQUUsQ0FEZ0I7RUFDYjtFQUNQQyxJQUFJLEVBQUUsQ0FGYztFQUdwQkMsSUFBSSxFQUFFLENBSGM7RUFJcEJDLEtBQUssRUFBRTtBQUphLENBQXhCO0FBT0FDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQk4sZUFBakIifQ==\n//# sourceURL=webpack-internal:///./src/scripts/movingDirections.js\n");

/***/ }),

/***/ "./src/scripts/polyTreeNode.js":
/*!*************************************!*\
  !*** ./src/scripts/polyTreeNode.js ***!
  \*************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("const TileMap = __webpack_require__(/*! ./TileMap */ \"./src/scripts/TileMap.js\");\n\nfunction PolyTreeNode(options) {\n  this.x = options.position[0];\n  this.y = options.position[1];\n  this.parent = null;\n  this.children = [];\n}\n\nPolyTreeNode.prototype.addChild = function (child) {\n  this.children.push(child);\n};\n\nPolyTreeNode.prototype.assignParent = function (parent) {\n  this.parent = parent;\n};\n\nmodule.exports = PolyTreeNode;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc2NyaXB0cy9wb2x5VHJlZU5vZGUuanMuanMiLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsT0FBTyxHQUFHQyxtQkFBTyxDQUFDLDJDQUFELENBQXZCOztBQUVBLFNBQVNDLFlBQVQsQ0FBdUJDLE9BQXZCLEVBQWdDO0VBQzVCLEtBQUtDLENBQUwsR0FBU0QsT0FBTyxDQUFDRSxRQUFSLENBQWlCLENBQWpCLENBQVQ7RUFDQSxLQUFLQyxDQUFMLEdBQVNILE9BQU8sQ0FBQ0UsUUFBUixDQUFpQixDQUFqQixDQUFUO0VBQ0EsS0FBS0UsTUFBTCxHQUFjLElBQWQ7RUFDQSxLQUFLQyxRQUFMLEdBQWdCLEVBQWhCO0FBQ0g7O0FBRUROLFlBQVksQ0FBQ08sU0FBYixDQUF1QkMsUUFBdkIsR0FBa0MsVUFBU0MsS0FBVCxFQUFpQjtFQUMvQyxLQUFLSCxRQUFMLENBQWNJLElBQWQsQ0FBbUJELEtBQW5CO0FBQ0gsQ0FGRDs7QUFJQVQsWUFBWSxDQUFDTyxTQUFiLENBQXVCSSxZQUF2QixHQUFzQyxVQUFTTixNQUFULEVBQWlCO0VBQ25ELEtBQUtBLE1BQUwsR0FBY0EsTUFBZDtBQUNILENBRkQ7O0FBSUFPLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQmIsWUFBakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYWtlLW1hbi1uZWFyLXlvdS8uL3NyYy9zY3JpcHRzL3BvbHlUcmVlTm9kZS5qcz8wZWI4Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFRpbGVNYXAgPSByZXF1aXJlKFwiLi9UaWxlTWFwXCIpO1xuXG5mdW5jdGlvbiBQb2x5VHJlZU5vZGUgKG9wdGlvbnMpIHtcbiAgICB0aGlzLnggPSBvcHRpb25zLnBvc2l0aW9uWzBdIDtcbiAgICB0aGlzLnkgPSBvcHRpb25zLnBvc2l0aW9uWzFdIDtcbiAgICB0aGlzLnBhcmVudCA9IG51bGw7XG4gICAgdGhpcy5jaGlsZHJlbiA9IFtdO1xufVxuXG5Qb2x5VHJlZU5vZGUucHJvdG90eXBlLmFkZENoaWxkID0gZnVuY3Rpb24oY2hpbGQpICB7XG4gICAgdGhpcy5jaGlsZHJlbi5wdXNoKGNoaWxkKTtcbn1cblxuUG9seVRyZWVOb2RlLnByb3RvdHlwZS5hc3NpZ25QYXJlbnQgPSBmdW5jdGlvbihwYXJlbnQpIHtcbiAgICB0aGlzLnBhcmVudCA9IHBhcmVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBQb2x5VHJlZU5vZGU7Il0sIm5hbWVzIjpbIlRpbGVNYXAiLCJyZXF1aXJlIiwiUG9seVRyZWVOb2RlIiwib3B0aW9ucyIsIngiLCJwb3NpdGlvbiIsInkiLCJwYXJlbnQiLCJjaGlsZHJlbiIsInByb3RvdHlwZSIsImFkZENoaWxkIiwiY2hpbGQiLCJwdXNoIiwiYXNzaWduUGFyZW50IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/scripts/polyTreeNode.js\n");

/***/ }),

/***/ "./src/scripts/utils.js":
/*!******************************!*\
  !*** ./src/scripts/utils.js ***!
  \******************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("const MovingDirection = __webpack_require__(/*! ./movingDirections.js */ \"./src/scripts/movingDirections.js\");\n\nconst Util = {\n  inherits(childClass, parentClass) {\n    function Surrogate() {}\n\n    ;\n    Surrogate.prototype = parentClass.prototype;\n    childClass.prototype = new Surrogate();\n    childClass.prototype.constructor = childClass;\n  },\n\n  randomVec(length) {\n    const deg = 2 * Math.PI * Math.random();\n    return Util.scale([Math.sin(deg), Math.cos(deg)], length);\n  },\n\n  // Scale the length of a vector by the given amount.\n  scale(vec, m) {\n    return [vec[0] * m, vec[1] * m];\n  },\n\n  dist(pos1, pos2) {\n    return Math.sqrt(Math.pow(pos1[0] - pos2[0], 2) + Math.pow(pos1[1] - pos2[1], 2));\n  },\n\n  findDirectionForGhost(ghost, cakeman, tileMap) {\n    let absX = Math.abs(ghost.x - cakeman.x);\n    let absY = Math.abs(ghost.y - cakeman.y);\n    let currentD = ghost.MovingDirection; // var item = items[Math.floor(Math.random()*items.length)];\n\n    if (absX >= absY) {\n      // should be left or right\n      if (ghost.x >= cakeman.x) {\n        // should be left\n        if (!tileMap.didCollidedWithEnv(ghost.x, ghost.y, MovingDirection.left) && MovingDirection.left !== 5 - currentD) return MovingDirection.left;else if (!tileMap.didCollidedWithEnv(ghost.x, ghost.y, MovingDirection.up) && MovingDirection.up !== 5 - currentD) return MovingDirection.up;else return MovingDirection.down;\n      } else {\n        // should be right\n        if (!tileMap.didCollidedWithEnv(ghost.x, ghost.y, MovingDirection.right) && MovingDirection.right !== 5 - currentD) return MovingDirection.right;else if (!tileMap.didCollidedWithEnv(ghost.x, ghost.y, MovingDirection.up) && MovingDirection.up !== 5 - currentD) return MovingDirection.up;else return MovingDirection.down;\n      }\n    } else {\n      // should be up or down\n      if (ghost.y >= cakeman.x) {\n        // should be up\n        if (!tileMap.didCollidedWithEnv(ghost.x, ghost.y, MovingDirection.up) && MovingDirection.up !== 5 - currentD) return MovingDirection.up;else if (!tileMap.didCollidedWithEnv(ghost.x, ghost.y, MovingDirection.right) && MovingDirection.right !== 5 - currentD) return MovingDirection.right;else return MovingDirection.left;\n      } else {\n        // should be down\n        if (!tileMap.didCollidedWithEnv(ghost.x, ghost.y, MovingDirection.down) && MovingDirection.down !== 5 - currentD) return MovingDirection.down;else if (!tileMap.didCollidedWithEnv(ghost.x, ghost.y, MovingDirection.right) && MovingDirection.right !== 5 - currentD) return MovingDirection.right;else return MovingDirection.left;\n      }\n    }\n  }\n\n};\nmodule.exports = Util; // const MovingDirection = {\n//     up: 0, // avoid using 0\n//     down: 1,\n//     left: 2,\n//     right: 3,\n//   };//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/utils.js\n");

/***/ }),

/***/ "./src/index.scss":
/*!************************!*\
  !*** ./src/index.scss ***!
  \************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguc2Nzcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYWtlLW1hbi1uZWFyLXlvdS8uL3NyYy9pbmRleC5zY3NzPzk3NDUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQge307Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/index.scss\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_require__("./src/index.js");
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.scss");
/******/ 	
/******/ })()
;