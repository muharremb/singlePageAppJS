/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

eval("const Game = __webpack_require__(/*! ./scripts/game.js */ \"./src/scripts/game.js\");\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const canvasEl = document.getElementById('game-canvas');\n  const game = new Game(canvasEl);\n  game.start();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsSUFBSSxHQUFHQyxtQkFBTyxDQUFDLGdEQUFELENBQXBCOztBQUVBQyxRQUFRLENBQUNDLGdCQUFULENBQTBCLGtCQUExQixFQUE4QyxNQUFNO0VBQ2hELE1BQU1DLFFBQVEsR0FBR0YsUUFBUSxDQUFDRyxjQUFULENBQXdCLGFBQXhCLENBQWpCO0VBQ0EsTUFBTUMsSUFBSSxHQUFHLElBQUlOLElBQUosQ0FBU0ksUUFBVCxDQUFiO0VBQ0FFLElBQUksQ0FBQ0MsS0FBTDtBQUVILENBTEQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYWtlLW1hbi1uZWFyLXlvdS8uL3NyYy9pbmRleC5qcz9iNjM1Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEdhbWUgPSByZXF1aXJlKFwiLi9zY3JpcHRzL2dhbWUuanNcIik7XG5cbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCAoKSA9PiB7XG4gICAgY29uc3QgY2FudmFzRWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZ2FtZS1jYW52YXMnKTtcbiAgICBjb25zdCBnYW1lID0gbmV3IEdhbWUoY2FudmFzRWwpO1xuICAgIGdhbWUuc3RhcnQoKTsgICAgXG4gICAgXG59KTtcbiJdLCJuYW1lcyI6WyJHYW1lIiwicmVxdWlyZSIsImRvY3VtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsImNhbnZhc0VsIiwiZ2V0RWxlbWVudEJ5SWQiLCJnYW1lIiwic3RhcnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/scripts/TileMap.js":
/*!********************************!*\
  !*** ./src/scripts/TileMap.js ***!
  \********************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("const Cakeman = __webpack_require__(/*! ./cakeman.js */ \"./src/scripts/cakeman.js\");\n\nconst Ghost = __webpack_require__(/*! ./ghost.js */ \"./src/scripts/ghost.js\");\n\nconst PolyTreeNode = __webpack_require__(/*! ./polyTreeNode.js */ \"./src/scripts/polyTreeNode.js\");\n\nconst MovingDirection = __webpack_require__(/*! ./movingDirections.js */ \"./src/scripts/movingDirections.js\");\n\nfunction TileMap(tileSize) {\n  // I used MDN Web Documents Square TileMaps Statis Implementation. \n  // https://developer.mozilla.org/en-US/docs/Games/Techniques/Tilemaps/Square_tilemaps_implementation:_Static_maps\n  this.tileSize = tileSize;\n  this.cakeman = new Image();\n  this.cakeman.src = \"../images/cakemanClosed.png\";\n  this.wall = new Image();\n  this.wall.src = \"../images/wall.png\";\n  this.dot = new Image();\n  this.dot.src = \"../images/dot.png\"; // 1 wall\n  // 0 dots\n  // 2 empty black\n  // 7 cakeman\n  // 3 ghost red\n  // 4 ghost blue\n\n  this.tiles = [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 7, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1], [1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1], [1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 1, 1, 1, 0, 1, 2, 2, 3, 2, 2, 4, 2, 2, 1, 0, 1, 1, 1, 1], [1, 1, 1, 1, 0, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 0, 1, 1, 1, 1], [2, 2, 2, 2, 0, 2, 2, 1, 1, 1, 1, 1, 1, 2, 2, 0, 2, 2, 2, 2], [1, 1, 1, 1, 0, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 0, 1, 1, 1, 1], [1, 1, 1, 1, 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 0, 1, 1, 1, 1], [1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1], [1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1], [1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]];\n  this.ghostNode = null;\n  this.packmanNode = null;\n}\n\nTileMap.prototype.setCanvas = function setCanvas(canvas) {\n  canvas.width = this.tiles[0].length * this.tileSize;\n  canvas.height = this.tiles.length * this.tileSize;\n};\n\nTileMap.prototype.draw = function (ctx) {\n  for (let row = 0; row < this.tiles.length; row++) {\n    for (let column = 0; column < this.tiles[row].length; column++) {\n      let tile = this.tiles[row][column];\n      if (tile === 1) this.drawWall(ctx, column, row, this.tileSize);else if (tile === 0) this.drawDot(ctx, column, row, this.tileSize);else {\n        this.drawEmpty(ctx, column, row, this.tileSize);\n      } // ctx.strokeStyle = \"yellow\";\n      // ctx.strokeRect(\n      //     column*this.tileSize,\n      //     row * this.tileSize,\n      //     this.tileSize,\n      //     this.tileSize\n      // )\n    }\n  }\n};\n\nTileMap.prototype.drawDot = function (ctx, column, row, size) {\n  ctx.drawImage(this.dot, column * this.tileSize, row * this.tileSize, size, size);\n};\n\nTileMap.prototype.drawWall = function (ctx, column, row, size) {\n  ctx.drawImage(this.wall, column * this.tileSize, row * this.tileSize, size, size);\n};\n\nTileMap.prototype.drawEmpty = function (ctx, column, row, size) {\n  ctx.fillStyle = \"black\";\n  ctx.fillRect(column * this.tileSize, row * this.tileSize, size, size);\n};\n\nTileMap.prototype.getCakeman = function () {\n  for (let row = 0; row < this.tiles.length; row++) {\n    for (let column = 0; column < this.tiles[row].length; column++) {\n      let tile = this.tiles[row][column];\n\n      if (tile === 7) {\n        this.tiles[row][column] = 0;\n        let cakeMan = new Cakeman({\n          position: [column * this.tileSize, row * this.tileSize],\n          size: this.tileSize,\n          tileMap: this\n        });\n        return cakeMan;\n      }\n    }\n  }\n};\n\nTileMap.prototype.getGhost = function () {\n  for (let row = 0; row < this.tiles.length; row++) {\n    for (let column = 0; column < this.tiles[row].length; column++) {\n      let tile = this.tiles[row][column];\n\n      if (tile === 3) {\n        this.tiles[row][column] = 0;\n        let ghost = new Ghost({\n          position: [column * this.tileSize, row * this.tileSize],\n          size: this.tileSize,\n          tileMap: this,\n          id: 3\n        });\n        this.ghostNode = new PolyTreeNode({\n          position: [row, column]\n        });\n        return ghost;\n      } else if (tile === 4) {\n        this.tiles[row][column] = 0;\n        let ghost = new Ghost({\n          position: [column * this.tileSize, row * this.tileSize],\n          size: this.tileSize,\n          tileMap: this,\n          id: 4\n        });\n        return ghost;\n      }\n    }\n  }\n};\n\nTileMap.prototype.didCollidedWithEnv = function (x, y, direction) {\n  if (typeof direction === null) return;\n\n  if (Number.isInteger(x / this.tileSize) && Number.isInteger(y / this.tileSize)) {\n    let column = 0;\n    let row = 0;\n    let nextColumn = 0;\n    let nextRow = 0;\n\n    switch (direction) {\n      case MovingDirection.right:\n        nextColumn = x + this.tileSize;\n        column = nextColumn / this.tileSize;\n        row = y / this.tileSize;\n        break;\n\n      case MovingDirection.left:\n        nextColumn = x - this.tileSize;\n        column = nextColumn / this.tileSize;\n        row = y / this.tileSize;\n        break;\n\n      case MovingDirection.up:\n        nextRow = y - this.tileSize;\n        row = nextRow / this.tileSize;\n        column = x / this.tileSize;\n        break;\n\n      case MovingDirection.down:\n        nextRow = y + this.tileSize;\n        row = nextRow / this.tileSize;\n        column = x / this.tileSize;\n        break;\n    }\n\n    const tile = this.tiles[row][column];\n    if (tile === 1) return true;\n  }\n\n  return false;\n};\n\nTileMap.prototype.removeDot = function removeDot(x, y) {\n  const row = y / this.tileSize;\n  const column = x / this.tileSize;\n\n  if (Number.isInteger(row) && Number.isInteger(column)) {\n    if (this.tiles[row][column] === 0) {\n      this.tiles[row][column] = 2;\n      return true;\n    }\n  }\n\n  return false;\n};\n\nTileMap.prototype.buildTree = function () {\n  let ghostPosition = this.ghostNode.value.split('');\n  let x = ghostPosition[0];\n  let y = ghostPosition[1];\n\n  for (let i = 0; i < 4; i++) {\n    if (this.tiles[x + 1][y] !== 1) {\n      let child = new PolyTreeNode({\n        position: [x + 1, y]\n      });\n      this.ghostNode.addChild(child);\n      child.assignParent(ghostNode);\n    } else if (this.tiles[x][y + 1] !== 1) {\n      let child = new PolyTreeNode({\n        position: [x, y + 1]\n      });\n      this.ghostNode.addChild(child);\n      child.assignParent(ghostNode);\n    } else if (this.tiles[x - 1][y] !== 1) {\n      let child = new PolyTreeNode({\n        position: [x - 1, y]\n      });\n      this.ghostNode.addChild(child);\n      child.assignParent(ghostNode);\n    } else if (this.tiles[x][y - 1] !== 1) {\n      let child = new PolyTreeNode({\n        position: [x, y - 1]\n      });\n      this.ghostNode.addChild(child);\n      child.assignParent(ghostNode);\n    }\n  }\n};\n\nmodule.exports = TileMap;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/TileMap.js\n");

/***/ }),

/***/ "./src/scripts/cakeman.js":
/*!********************************!*\
  !*** ./src/scripts/cakeman.js ***!
  \********************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("const MovingDirection = __webpack_require__(/*! ./movingDirections.js */ \"./src/scripts/movingDirections.js\");\n\nfunction Cakeman(options) {\n  this.x = options.position[0];\n  this.y = options.position[1];\n  this.tileSize = options.size;\n  this.velocity = 2;\n  this.tileMap = options.tileMap;\n  this.currentMovingDirection = null;\n  this.requestedMovingDirection = null;\n  this.animateTimer = null;\n  this.animateDefault = 10;\n  this.rotation = {\n    right: 0,\n    down: 1,\n    left: 2,\n    up: 3\n  };\n  this.cakemanRotation = this.rotation.right;\n  this.hasMoved = false;\n  document.addEventListener(\"keydown\", this.keydown.bind(this));\n  this.loadCakemanImages();\n}\n\nCakeman.prototype.draw = function (ctx) {\n  this.move();\n  this.animate();\n  this.removeDot(); // I used Tutorial on how to rotate a single image\n  // https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Transformations\n\n  let size = this.tileSize / 2;\n  ctx.save();\n  ctx.translate(this.x + size, this.y + size);\n  ctx.rotate(this.cakemanRotation * 90 * Math.PI / 180);\n  ctx.drawImage(this.cakemanImages[this.cakemanImageIndex], -size, -size, this.tileSize, this.tileSize);\n  ctx.restore(); // ctx.drawImage(\n  //     this.cakemanImages[this.cakemanImageIndex],\n  //     this.x,\n  //     this.y,\n  //     this.tileSize,\n  //     this.tileSize\n  // )\n};\n\nCakeman.prototype.move = function () {\n  if (this.currentMovingDirection !== this.requestedMovingDirection) {\n    if (Number.isInteger(this.x / this.tileSize) && Number.isInteger(this.y / this.tileSize)) {\n      if (!this.tileMap.didCollidedWithEnv(this.x, this.y, this.requestedMovingDirection)) this.currentMovingDirection = this.requestedMovingDirection;\n    }\n  }\n\n  if (this.tileMap.didCollidedWithEnv(this.x, this.y, this.currentMovingDirection)) {\n    this.animateTimer = null;\n    this.cakemanImageIndex = 0;\n    return;\n  } else if (this.currentMovingDirection && !this.animateTimer) {\n    this.animateTimer = this.animateDefault;\n  }\n\n  switch (this.currentMovingDirection) {\n    case MovingDirection.up:\n      this.y -= this.velocity;\n      this.cakemanRotation = this.rotation.up;\n      break;\n\n    case MovingDirection.down:\n      this.y += this.velocity;\n      this.cakemanRotation = this.rotation.down;\n      break;\n\n    case MovingDirection.left:\n      this.x -= this.velocity;\n      if (this.x < 12) this.x = 24 * this.tileMap.tiles[0].length;\n      this.cakemanRotation = this.rotation.left;\n      break;\n\n    case MovingDirection.right:\n      this.x += this.velocity;\n      if (this.x >= this.tileMap.tiles[0].length * 24) this.x = 0;\n      this.cakemanRotation = this.rotation.right;\n      break;\n  }\n};\n\nCakeman.prototype.loadCakemanImages = function () {\n  const cakemanImg1 = new Image();\n  cakemanImg1.src = \"../images/cakemanClosed.png\";\n  const cakemanImg2 = new Image();\n  cakemanImg2.src = \"../images/cakemanHalfOpen.png\";\n  const cakemanImg3 = new Image();\n  cakemanImg3.src = \"../images/cakemanFullOpen.png\";\n  const cakemanImg4 = new Image();\n  cakemanImg4.src = \"../images/cakemanHalfOpen.png\";\n  this.cakemanImages = [cakemanImg1, cakemanImg2, cakemanImg3, cakemanImg4];\n  this.cakemanImageIndex = 0;\n};\n\nCakeman.prototype.keydown = function (event) {\n  const arr = [38, 40, 37, 39];\n  if (arr.includes(event.keyCode)) this.hasMoved = true; // up key\n\n  if (event.keyCode === 38) {\n    if (this.currentMovingDirection === MovingDirection.down) {\n      this.currentMovingDirection = MovingDirection.up;\n    }\n\n    this.requestedMovingDirection = MovingDirection.up;\n  } // down\n\n\n  if (event.keyCode === 40) {\n    if (this.currentMovingDirection === MovingDirection.up) {\n      this.currentMovingDirection = MovingDirection.down;\n    }\n\n    this.requestedMovingDirection = MovingDirection.down;\n  } // 37 left\n\n\n  if (event.keyCode === 37) {\n    if (this.currentMovingDirection === MovingDirection.right) {\n      this.currentMovingDirection = MovingDirection.left;\n    }\n\n    this.requestedMovingDirection = MovingDirection.left;\n  } // 39 right\n\n\n  if (event.keyCode === 39) {\n    if (this.currentMovingDirection === MovingDirection.left) {\n      this.currentMovingDirection = MovingDirection.right;\n    }\n\n    this.requestedMovingDirection = MovingDirection.right;\n  }\n};\n\nCakeman.prototype.animate = function animate() {\n  if (!this.animateTimer) {\n    return;\n  }\n\n  this.animateTimer -= 1;\n\n  if (this.animateTimer === 0) {\n    this.animateTimer = this.animateDefault;\n    this.cakemanImageIndex += 1;\n\n    if (this.cakemanImageIndex === this.cakemanImages.length) {\n      this.cakemanImageIndex = 0;\n    }\n  }\n};\n\nCakeman.prototype.removeDot = function removeDot() {\n  if (this.tileMap.removeDot(this.x, this.y)) {}\n};\n\nmodule.exports = Cakeman;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/cakeman.js\n");

/***/ }),

/***/ "./src/scripts/game.js":
/*!*****************************!*\
  !*** ./src/scripts/game.js ***!
  \*****************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("const TileMap = __webpack_require__(/*! ./TileMap */ \"./src/scripts/TileMap.js\");\n\nconst Cakeman = __webpack_require__(/*! ./cakeman.js */ \"./src/scripts/cakeman.js\");\n\nfunction Game(canvas) {\n  this.canvas = canvas;\n  this.ctx = this.canvas.getContext(\"2d\");\n  this.tileSize = 24;\n  this.velocity = 2;\n  this.tileMap = new TileMap(this.tileSize);\n  this.cakeman = this.tileMap.getCakeman();\n  this.ghost = this.tileMap.getGhost();\n  this.blueGhost = this.tileMap.getGhost();\n  this.setCanvasSize();\n}\n\n;\n\nGame.prototype.setCanvasSize = function setCanvasSize() {\n  this.tileMap.setCanvas(this.canvas);\n};\n\nGame.prototype.start = function () {\n  setInterval(this.gameIter.bind(this), 1000 / 50);\n};\n\nGame.prototype.gameIter = function () {\n  // console.log(`cakeman.x: ${this.cakeman.x}, ${this.cakeman.y} ghost x: ${this.ghost.x}, ${this.ghost.y}`);\n  console.log(`cakeman.x: ${this.cakeman.x} ${this.cakeman.y}`);\n\n  if (!this.isLost()) {\n    this.tileMap.draw(this.ctx);\n    this.cakeman.draw(this.ctx);\n    this.ghost.draw(this.ctx, this.pause(), this.cakeman);\n    this.blueGhost.draw(this.ctx, this.pause(), this.cakeman);\n  } else return;\n};\n\nGame.prototype.pause = function pause() {\n  return !this.cakeman.hasMoved;\n};\n\nGame.prototype.isLost = function isLost() {\n  // 2d Detection Collision on mozilla\n  // https://developer.mozilla.org/en-US/docs/Games/Techniques/2D_collision_detection\n  if (this.cakeman.x < this.ghost.x + 16 && this.cakeman.x + 16 > this.ghost.x && this.cakeman.y < this.ghost.y + 16 && 16 + this.cakeman.y > this.ghost.y || this.cakeman.x < this.blueGhost.x + 16 && this.cakeman.x + 16 > this.blueGhost.x && this.cakeman.y < this.blueGhost.y + 16 && 16 + this.cakeman.y > this.blueGhost.y) {\n    return true;\n  }\n\n  return false;\n};\n\nmodule.exports = Game;\nwindow.Game = Game;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFMLENBQWFjLENBQWIsR0FBaUIsRUFBakIsR0FBc0IsS0FBS1YsU0FBTCxDQUFlVSxDQUR4QyxJQUVHLEtBQUtkLE9BQUwsQ0FBYWUsQ0FBYixHQUFpQixLQUFLWCxTQUFMLENBQWVXLENBQWYsR0FBbUIsRUFGdkMsSUFHRyxLQUFLLEtBQUtmLE9BQUwsQ0FBYWUsQ0FBbEIsR0FBc0IsS0FBS1gsU0FBTCxDQUFlVyxDQVR6QyxFQVVFO0lBQ0UsT0FBTyxJQUFQO0VBQ0g7O0VBQ0QsT0FBTyxLQUFQO0FBQ0gsQ0FsQkQ7O0FBb0JBSyxNQUFNLENBQUNDLE9BQVAsR0FBaUI1QixJQUFqQjtBQUVBNkIsTUFBTSxDQUFDN0IsSUFBUCxHQUFjQSxJQUFkIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2FrZS1tYW4tbmVhci15b3UvLi9zcmMvc2NyaXB0cy9nYW1lLmpzP2NkYzAiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgVGlsZU1hcCA9IHJlcXVpcmUoXCIuL1RpbGVNYXBcIik7XG5jb25zdCBDYWtlbWFuID0gcmVxdWlyZShcIi4vY2FrZW1hbi5qc1wiKTtcblxuZnVuY3Rpb24gR2FtZShjYW52YXMpIHtcbiAgICB0aGlzLmNhbnZhcyA9IGNhbnZhcztcbiAgICB0aGlzLmN0eCA9IHRoaXMuY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcbiAgICB0aGlzLnRpbGVTaXplID0gMjQ7XG4gICAgdGhpcy52ZWxvY2l0eSA9IDI7XG4gICAgdGhpcy50aWxlTWFwID0gbmV3IFRpbGVNYXAodGhpcy50aWxlU2l6ZSk7XG4gICAgdGhpcy5jYWtlbWFuID0gdGhpcy50aWxlTWFwLmdldENha2VtYW4oKTtcbiAgICB0aGlzLmdob3N0ID0gdGhpcy50aWxlTWFwLmdldEdob3N0KCk7XG4gICAgdGhpcy5ibHVlR2hvc3QgPSB0aGlzLnRpbGVNYXAuZ2V0R2hvc3QoKTsgXG5cbiAgICB0aGlzLnNldENhbnZhc1NpemUoKTtcbn07XG5cblxuR2FtZS5wcm90b3R5cGUuc2V0Q2FudmFzU2l6ZSA9IGZ1bmN0aW9uIHNldENhbnZhc1NpemUoKSB7XG4gICAgdGhpcy50aWxlTWFwLnNldENhbnZhcyh0aGlzLmNhbnZhcyk7XG59XG5cbkdhbWUucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24oKSB7XG4gICAgc2V0SW50ZXJ2YWwodGhpcy5nYW1lSXRlci5iaW5kKHRoaXMpLCAxMDAwLzUwKTtcbn1cblxuR2FtZS5wcm90b3R5cGUuZ2FtZUl0ZXIgPSBmdW5jdGlvbigpIHtcbiAgICAvLyBjb25zb2xlLmxvZyhgY2FrZW1hbi54OiAke3RoaXMuY2FrZW1hbi54fSwgJHt0aGlzLmNha2VtYW4ueX0gZ2hvc3QgeDogJHt0aGlzLmdob3N0Lnh9LCAke3RoaXMuZ2hvc3QueX1gKTtcbiAgICBjb25zb2xlLmxvZyhgY2FrZW1hbi54OiAke3RoaXMuY2FrZW1hbi54fSAke3RoaXMuY2FrZW1hbi55fWApO1xuICAgIGlmKCF0aGlzLmlzTG9zdCgpKSB7XG5cbiAgICAgICAgdGhpcy50aWxlTWFwLmRyYXcodGhpcy5jdHgpO1xuICAgICAgICB0aGlzLmNha2VtYW4uZHJhdyh0aGlzLmN0eCk7XG4gICAgICAgIHRoaXMuZ2hvc3QuZHJhdyh0aGlzLmN0eCwgdGhpcy5wYXVzZSgpLCB0aGlzLmNha2VtYW4pO1xuICAgICAgICB0aGlzLmJsdWVHaG9zdC5kcmF3KHRoaXMuY3R4LCB0aGlzLnBhdXNlKCksIHRoaXMuY2FrZW1hbik7XG4gICAgfVxuICAgIGVsc2UgcmV0dXJuO1xufTtcblxuR2FtZS5wcm90b3R5cGUucGF1c2UgPSBmdW5jdGlvbiBwYXVzZSgpIHtcbiAgICByZXR1cm4gIXRoaXMuY2FrZW1hbi5oYXNNb3ZlZDtcbn1cblxuR2FtZS5wcm90b3R5cGUuaXNMb3N0ID0gZnVuY3Rpb24gaXNMb3N0KCkge1xuICAgIC8vIDJkIERldGVjdGlvbiBDb2xsaXNpb24gb24gbW96aWxsYVxuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvR2FtZXMvVGVjaG5pcXVlcy8yRF9jb2xsaXNpb25fZGV0ZWN0aW9uXG4gICAgXG4gICAgaWYoXG4gICAgKHRoaXMuY2FrZW1hbi54IDwgdGhpcy5naG9zdC54ICsgMTYgJiZcbiAgICB0aGlzLmNha2VtYW4ueCArIDE2ID4gdGhpcy5naG9zdC54ICYmXG4gICAgdGhpcy5jYWtlbWFuLnkgPCB0aGlzLmdob3N0LnkgKyAxNiAmJlxuICAgIDE2ICsgdGhpcy5jYWtlbWFuLnkgPiB0aGlzLmdob3N0LnkpIHx8XG5cbiAgICAodGhpcy5jYWtlbWFuLnggPCB0aGlzLmJsdWVHaG9zdC54ICsgMTYgJiZcbiAgICAgICAgdGhpcy5jYWtlbWFuLnggKyAxNiA+IHRoaXMuYmx1ZUdob3N0LnggJiZcbiAgICAgICAgdGhpcy5jYWtlbWFuLnkgPCB0aGlzLmJsdWVHaG9zdC55ICsgMTYgJiZcbiAgICAgICAgMTYgKyB0aGlzLmNha2VtYW4ueSA+IHRoaXMuYmx1ZUdob3N0LnkpXG4gICAgKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gR2FtZTtcblxud2luZG93LkdhbWUgPSBHYW1lO1xuIl0sIm5hbWVzIjpbIlRpbGVNYXAiLCJyZXF1aXJlIiwiQ2FrZW1hbiIsIkdhbWUiLCJjYW52YXMiLCJjdHgiLCJnZXRDb250ZXh0IiwidGlsZVNpemUiLCJ2ZWxvY2l0eSIsInRpbGVNYXAiLCJjYWtlbWFuIiwiZ2V0Q2FrZW1hbiIsImdob3N0IiwiZ2V0R2hvc3QiLCJibHVlR2hvc3QiLCJzZXRDYW52YXNTaXplIiwicHJvdG90eXBlIiwic2V0Q2FudmFzIiwic3RhcnQiLCJzZXRJbnRlcnZhbCIsImdhbWVJdGVyIiwiYmluZCIsImNvbnNvbGUiLCJsb2ciLCJ4IiwieSIsImlzTG9zdCIsImRyYXciLCJwYXVzZSIsImhhc01vdmVkIiwibW9kdWxlIiwiZXhwb3J0cyIsIndpbmRvdyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/scripts/game.js\n");

/***/ }),

/***/ "./src/scripts/ghost.js":
/*!******************************!*\
  !*** ./src/scripts/ghost.js ***!
  \******************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("const MovingDirection = __webpack_require__(/*! ./movingDirections.js */ \"./src/scripts/movingDirections.js\");\n\nconst Util = __webpack_require__(/*! ./utils.js */ \"./src/scripts/utils.js\");\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n;\n\nfunction Ghost(options) {\n  this.x = options.position[0];\n  this.y = options.position[1];\n  this.tileSize = options.size;\n  this.velocity = 2;\n  this.tileMap = options.tileMap;\n  this.id = options.id;\n  this.movingDirection = getRandomInt(1, 4); // initial random is fine\n\n  this.loadGhostImage();\n}\n\nGhost.prototype.draw = function draw(ctx, pause, cakeman) {\n  if (!pause) {\n    this.move(cakeman);\n    if (getRandomInt(1, 4) < 2) this.changeDirection(cakeman); // if(this.tileMap.didCollidedWithEnv(this.x, this.y, this.movingDirection)) this.changeDirection(cakeman);\n  }\n\n  ctx.drawImage(this.ghostImage, this.x, this.y, this.tileSize, this.tileSize);\n};\n\nGhost.prototype.move = function move(cakeman) {\n  if (!this.tileMap.didCollidedWithEnv(this.x, this.y, this.movingDirection)) {\n    switch (this.movingDirection) {\n      case MovingDirection.up:\n        this.y -= this.velocity;\n        break;\n\n      case MovingDirection.down:\n        this.y += this.velocity;\n        break;\n\n      case MovingDirection.left:\n        this.x -= this.velocity;\n        break;\n\n      case MovingDirection.right:\n        this.x += this.velocity;\n        break;\n    }\n  }\n};\n\nGhost.prototype.changeDirection = function changeDirection(cakeman) {\n  let newMoveDirection = null;\n\n  if (this.id !== 3) {\n    if (getRandomInt(1, 4) < 4) {\n      newMoveDirection = Util.findDirectionForGhost(this, cakeman);\n    } else {\n      newMoveDirection = getRandomInt(1, 4);\n    }\n  } else {\n    newMoveDirection = Util.findDirectionForGhost(this, cakeman);\n  }\n\n  if (this.movingDirection !== newMoveDirection) {\n    if (Number.isInteger(this.x / this.tileSize) && Number.isInteger(this.y / this.tileSize)) {\n      if (!this.tileMap.didCollidedWithEnv(this.x, this.y, newMoveDirection)) {\n        this.movingDirection = newMoveDirection;\n      } else {\n        if (!this.tileMap.didCollidedWithEnv(this.x, this.y, MovingDirection.right)) {\n          this.movingDirection = MovingDirection.right;\n        }\n      }\n    }\n  }\n};\n\nGhost.prototype.loadGhostImage = function draw() {\n  this.ghostImage = new Image();\n\n  if (this.id === 3) {\n    this.ghostImage.src = \"../images/redGhost.png\";\n  } else if (this.id === 4) {\n    this.ghostImage.src = \"../images/blueGhost.png\";\n  }\n};\n\nmodule.exports = Ghost;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/ghost.js\n");

/***/ }),

/***/ "./src/scripts/movingDirections.js":
/*!*****************************************!*\
  !*** ./src/scripts/movingDirections.js ***!
  \*****************************************/
/***/ (function(module) {

eval("const MovingDirection = {\n  up: 4,\n  // avoid using 0\n  down: 1,\n  left: 2,\n  right: 3\n};\nmodule.exports = MovingDirection;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc2NyaXB0cy9tb3ZpbmdEaXJlY3Rpb25zLmpzLmpzIiwibmFtZXMiOlsiTW92aW5nRGlyZWN0aW9uIiwidXAiLCJkb3duIiwibGVmdCIsInJpZ2h0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2FrZS1tYW4tbmVhci15b3UvLi9zcmMvc2NyaXB0cy9tb3ZpbmdEaXJlY3Rpb25zLmpzPzRjYmMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgTW92aW5nRGlyZWN0aW9uID0ge1xuICAgIHVwOiA0LCAvLyBhdm9pZCB1c2luZyAwXG4gICAgZG93bjogMSxcbiAgICBsZWZ0OiAyLFxuICAgIHJpZ2h0OiAzLFxuICB9O1xuICBcbm1vZHVsZS5leHBvcnRzID0gTW92aW5nRGlyZWN0aW9uOyJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsZUFBZSxHQUFHO0VBQ3BCQyxFQUFFLEVBQUUsQ0FEZ0I7RUFDYjtFQUNQQyxJQUFJLEVBQUUsQ0FGYztFQUdwQkMsSUFBSSxFQUFFLENBSGM7RUFJcEJDLEtBQUssRUFBRTtBQUphLENBQXhCO0FBT0FDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQk4sZUFBakIifQ==\n//# sourceURL=webpack-internal:///./src/scripts/movingDirections.js\n");

/***/ }),

/***/ "./src/scripts/polyTreeNode.js":
/*!*************************************!*\
  !*** ./src/scripts/polyTreeNode.js ***!
  \*************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("const TileMap = __webpack_require__(/*! ./TileMap */ \"./src/scripts/TileMap.js\");\n\nfunction PolyTreeNode(options) {\n  this.value = options.position.join('');\n  this.parent = null;\n  this.children = [];\n}\n\nPolyTreeNode.prototype.addChild = function (child) {\n  this.children.push(child);\n};\n\nPolyTreeNode.prototype.assignParent = function (parent) {\n  this.parent = parent;\n};\n\nmodule.exports = PolyTreeNode;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc2NyaXB0cy9wb2x5VHJlZU5vZGUuanMuanMiLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsT0FBTyxHQUFHQyxtQkFBTyxDQUFDLDJDQUFELENBQXZCOztBQUVBLFNBQVNDLFlBQVQsQ0FBdUJDLE9BQXZCLEVBQWdDO0VBQzVCLEtBQUtDLEtBQUwsR0FBYUQsT0FBTyxDQUFDRSxRQUFSLENBQWlCQyxJQUFqQixDQUFzQixFQUF0QixDQUFiO0VBQ0EsS0FBS0MsTUFBTCxHQUFjLElBQWQ7RUFDQSxLQUFLQyxRQUFMLEdBQWdCLEVBQWhCO0FBQ0g7O0FBRUROLFlBQVksQ0FBQ08sU0FBYixDQUF1QkMsUUFBdkIsR0FBa0MsVUFBU0MsS0FBVCxFQUFpQjtFQUMvQyxLQUFLSCxRQUFMLENBQWNJLElBQWQsQ0FBbUJELEtBQW5CO0FBQ0gsQ0FGRDs7QUFJQVQsWUFBWSxDQUFDTyxTQUFiLENBQXVCSSxZQUF2QixHQUFzQyxVQUFTTixNQUFULEVBQWlCO0VBQ25ELEtBQUtBLE1BQUwsR0FBY0EsTUFBZDtBQUNILENBRkQ7O0FBSUFPLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQmIsWUFBakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYWtlLW1hbi1uZWFyLXlvdS8uL3NyYy9zY3JpcHRzL3BvbHlUcmVlTm9kZS5qcz8wZWI4Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFRpbGVNYXAgPSByZXF1aXJlKFwiLi9UaWxlTWFwXCIpO1xuXG5mdW5jdGlvbiBQb2x5VHJlZU5vZGUgKG9wdGlvbnMpIHtcbiAgICB0aGlzLnZhbHVlID0gb3B0aW9ucy5wb3NpdGlvbi5qb2luKCcnKSA7XG4gICAgdGhpcy5wYXJlbnQgPSBudWxsO1xuICAgIHRoaXMuY2hpbGRyZW4gPSBbXTtcbn1cblxuUG9seVRyZWVOb2RlLnByb3RvdHlwZS5hZGRDaGlsZCA9IGZ1bmN0aW9uKGNoaWxkKSAge1xuICAgIHRoaXMuY2hpbGRyZW4ucHVzaChjaGlsZCk7XG59XG5cblBvbHlUcmVlTm9kZS5wcm90b3R5cGUuYXNzaWduUGFyZW50ID0gZnVuY3Rpb24ocGFyZW50KSB7XG4gICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUG9seVRyZWVOb2RlOyJdLCJuYW1lcyI6WyJUaWxlTWFwIiwicmVxdWlyZSIsIlBvbHlUcmVlTm9kZSIsIm9wdGlvbnMiLCJ2YWx1ZSIsInBvc2l0aW9uIiwiam9pbiIsInBhcmVudCIsImNoaWxkcmVuIiwicHJvdG90eXBlIiwiYWRkQ2hpbGQiLCJjaGlsZCIsInB1c2giLCJhc3NpZ25QYXJlbnQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/scripts/polyTreeNode.js\n");

/***/ }),

/***/ "./src/scripts/utils.js":
/*!******************************!*\
  !*** ./src/scripts/utils.js ***!
  \******************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("const MovingDirection = __webpack_require__(/*! ./movingDirections.js */ \"./src/scripts/movingDirections.js\");\n\nconst Util = {\n  inherits(childClass, parentClass) {\n    function Surrogate() {}\n\n    ;\n    Surrogate.prototype = parentClass.prototype;\n    childClass.prototype = new Surrogate();\n    childClass.prototype.constructor = childClass;\n  },\n\n  randomVec(length) {\n    const deg = 2 * Math.PI * Math.random();\n    return Util.scale([Math.sin(deg), Math.cos(deg)], length);\n  },\n\n  // Scale the length of a vector by the given amount.\n  scale(vec, m) {\n    return [vec[0] * m, vec[1] * m];\n  },\n\n  dist(pos1, pos2) {\n    return Math.sqrt(Math.pow(pos1[0] - pos2[0], 2) + Math.pow(pos1[1] - pos2[1], 2));\n  },\n\n  findDirectionForGhost(ghost, cakeman) {\n    let absX = Math.abs(ghost.x - cakeman.x);\n    let absY = Math.abs(ghost.y - cakeman.y);\n\n    if (absX >= absY) {\n      // x direction move, left or rigth\n      return ghost.x < cakeman.x ? MovingDirection.right : MovingDirection.left;\n    } else {\n      // up or down move\n      return ghost.y < cakeman.y ? MovingDirection.down : MovingDirection.up;\n    }\n  }\n\n};\nmodule.exports = Util;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc2NyaXB0cy91dGlscy5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxlQUFlLEdBQUdDLG1CQUFPLENBQUMsZ0VBQUQsQ0FBL0I7O0FBRUEsTUFBTUMsSUFBSSxHQUFHO0VBQ1RDLFFBQVEsQ0FBQ0MsVUFBRCxFQUFhQyxXQUFiLEVBQTBCO0lBQzlCLFNBQVNDLFNBQVQsR0FBcUIsQ0FBRTs7SUFBQTtJQUN2QkEsU0FBUyxDQUFDQyxTQUFWLEdBQXNCRixXQUFXLENBQUNFLFNBQWxDO0lBQ0FILFVBQVUsQ0FBQ0csU0FBWCxHQUF1QixJQUFJRCxTQUFKLEVBQXZCO0lBQ0FGLFVBQVUsQ0FBQ0csU0FBWCxDQUFxQkMsV0FBckIsR0FBbUNKLFVBQW5DO0VBQ0gsQ0FOUTs7RUFRVEssU0FBUyxDQUFDQyxNQUFELEVBQVM7SUFDZCxNQUFNQyxHQUFHLEdBQUcsSUFBSUMsSUFBSSxDQUFDQyxFQUFULEdBQWNELElBQUksQ0FBQ0UsTUFBTCxFQUExQjtJQUNBLE9BQU9aLElBQUksQ0FBQ2EsS0FBTCxDQUFXLENBQUNILElBQUksQ0FBQ0ksR0FBTCxDQUFTTCxHQUFULENBQUQsRUFBZ0JDLElBQUksQ0FBQ0ssR0FBTCxDQUFTTixHQUFULENBQWhCLENBQVgsRUFBMkNELE1BQTNDLENBQVA7RUFDSCxDQVhROztFQVlQO0VBQ0ZLLEtBQUssQ0FBQ0csR0FBRCxFQUFNQyxDQUFOLEVBQVM7SUFDVixPQUFPLENBQUNELEdBQUcsQ0FBQyxDQUFELENBQUgsR0FBU0MsQ0FBVixFQUFhRCxHQUFHLENBQUMsQ0FBRCxDQUFILEdBQVNDLENBQXRCLENBQVA7RUFDSCxDQWZROztFQWlCVEMsSUFBSSxDQUFDQyxJQUFELEVBQU9DLElBQVAsRUFBYTtJQUNiLE9BQU9WLElBQUksQ0FBQ1csSUFBTCxDQUNMWCxJQUFJLENBQUNZLEdBQUwsQ0FBU0gsSUFBSSxDQUFDLENBQUQsQ0FBSixHQUFVQyxJQUFJLENBQUMsQ0FBRCxDQUF2QixFQUE0QixDQUE1QixJQUFpQ1YsSUFBSSxDQUFDWSxHQUFMLENBQVNILElBQUksQ0FBQyxDQUFELENBQUosR0FBVUMsSUFBSSxDQUFDLENBQUQsQ0FBdkIsRUFBNEIsQ0FBNUIsQ0FENUIsQ0FBUDtFQUdILENBckJROztFQXVCVEcscUJBQXFCLENBQUNDLEtBQUQsRUFBUUMsT0FBUixFQUFpQjtJQUNsQyxJQUFJQyxJQUFJLEdBQUdoQixJQUFJLENBQUNpQixHQUFMLENBQVNILEtBQUssQ0FBQ0ksQ0FBTixHQUFVSCxPQUFPLENBQUNHLENBQTNCLENBQVg7SUFDQSxJQUFJQyxJQUFJLEdBQUduQixJQUFJLENBQUNpQixHQUFMLENBQVNILEtBQUssQ0FBQ00sQ0FBTixHQUFVTCxPQUFPLENBQUNLLENBQTNCLENBQVg7O0lBQ0EsSUFBR0osSUFBSSxJQUFJRyxJQUFYLEVBQWlCO01BQ2I7TUFDQSxPQUFPTCxLQUFLLENBQUNJLENBQU4sR0FBVUgsT0FBTyxDQUFDRyxDQUFsQixHQUFzQjlCLGVBQWUsQ0FBQ2lDLEtBQXRDLEdBQThDakMsZUFBZSxDQUFDa0MsSUFBckU7SUFDSCxDQUhELE1BR087TUFDSDtNQUNBLE9BQU9SLEtBQUssQ0FBQ00sQ0FBTixHQUFVTCxPQUFPLENBQUNLLENBQWxCLEdBQXNCaEMsZUFBZSxDQUFDbUMsSUFBdEMsR0FBNkNuQyxlQUFlLENBQUNvQyxFQUFwRTtJQUNIO0VBQ0o7O0FBakNRLENBQWI7QUFvQ0FDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQnBDLElBQWpCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2FrZS1tYW4tbmVhci15b3UvLi9zcmMvc2NyaXB0cy91dGlscy5qcz9kYjEzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IE1vdmluZ0RpcmVjdGlvbiA9IHJlcXVpcmUoXCIuL21vdmluZ0RpcmVjdGlvbnMuanNcIik7XG5cbmNvbnN0IFV0aWwgPSB7XG4gICAgaW5oZXJpdHMoY2hpbGRDbGFzcywgcGFyZW50Q2xhc3MpIHtcbiAgICAgICAgZnVuY3Rpb24gU3Vycm9nYXRlKCkge307XG4gICAgICAgIFN1cnJvZ2F0ZS5wcm90b3R5cGUgPSBwYXJlbnRDbGFzcy5wcm90b3R5cGU7XG4gICAgICAgIGNoaWxkQ2xhc3MucHJvdG90eXBlID0gbmV3IFN1cnJvZ2F0ZSgpO1xuICAgICAgICBjaGlsZENsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGNoaWxkQ2xhc3M7XG4gICAgfSxcblxuICAgIHJhbmRvbVZlYyhsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgZGVnID0gMiAqIE1hdGguUEkgKiBNYXRoLnJhbmRvbSgpO1xuICAgICAgICByZXR1cm4gVXRpbC5zY2FsZShbTWF0aC5zaW4oZGVnKSwgTWF0aC5jb3MoZGVnKV0sIGxlbmd0aCk7XG4gICAgfSxcbiAgICAgIC8vIFNjYWxlIHRoZSBsZW5ndGggb2YgYSB2ZWN0b3IgYnkgdGhlIGdpdmVuIGFtb3VudC5cbiAgICBzY2FsZSh2ZWMsIG0pIHtcbiAgICAgICAgcmV0dXJuIFt2ZWNbMF0gKiBtLCB2ZWNbMV0gKiBtXTtcbiAgICB9LFxuXG4gICAgZGlzdChwb3MxLCBwb3MyKSB7XG4gICAgICAgIHJldHVybiBNYXRoLnNxcnQoXG4gICAgICAgICAgTWF0aC5wb3cocG9zMVswXSAtIHBvczJbMF0sIDIpICsgTWF0aC5wb3cocG9zMVsxXSAtIHBvczJbMV0sIDIpXG4gICAgICAgICk7XG4gICAgfSxcbiAgICBcbiAgICBmaW5kRGlyZWN0aW9uRm9yR2hvc3QoZ2hvc3QsIGNha2VtYW4pIHtcbiAgICAgICAgbGV0IGFic1ggPSBNYXRoLmFicyhnaG9zdC54IC0gY2FrZW1hbi54KTtcbiAgICAgICAgbGV0IGFic1kgPSBNYXRoLmFicyhnaG9zdC55IC0gY2FrZW1hbi55KTtcbiAgICAgICAgaWYoYWJzWCA+PSBhYnNZKSB7XG4gICAgICAgICAgICAvLyB4IGRpcmVjdGlvbiBtb3ZlLCBsZWZ0IG9yIHJpZ3RoXG4gICAgICAgICAgICByZXR1cm4gZ2hvc3QueCA8IGNha2VtYW4ueCA/IE1vdmluZ0RpcmVjdGlvbi5yaWdodCA6IE1vdmluZ0RpcmVjdGlvbi5sZWZ0OyAgXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyB1cCBvciBkb3duIG1vdmVcbiAgICAgICAgICAgIHJldHVybiBnaG9zdC55IDwgY2FrZW1hbi55ID8gTW92aW5nRGlyZWN0aW9uLmRvd24gOiBNb3ZpbmdEaXJlY3Rpb24udXA7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gVXRpbDsiXSwibmFtZXMiOlsiTW92aW5nRGlyZWN0aW9uIiwicmVxdWlyZSIsIlV0aWwiLCJpbmhlcml0cyIsImNoaWxkQ2xhc3MiLCJwYXJlbnRDbGFzcyIsIlN1cnJvZ2F0ZSIsInByb3RvdHlwZSIsImNvbnN0cnVjdG9yIiwicmFuZG9tVmVjIiwibGVuZ3RoIiwiZGVnIiwiTWF0aCIsIlBJIiwicmFuZG9tIiwic2NhbGUiLCJzaW4iLCJjb3MiLCJ2ZWMiLCJtIiwiZGlzdCIsInBvczEiLCJwb3MyIiwic3FydCIsInBvdyIsImZpbmREaXJlY3Rpb25Gb3JHaG9zdCIsImdob3N0IiwiY2FrZW1hbiIsImFic1giLCJhYnMiLCJ4IiwiYWJzWSIsInkiLCJyaWdodCIsImxlZnQiLCJkb3duIiwidXAiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/scripts/utils.js\n");

/***/ }),

/***/ "./src/index.scss":
/*!************************!*\
  !*** ./src/index.scss ***!
  \************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguc2Nzcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYWtlLW1hbi1uZWFyLXlvdS8uL3NyYy9pbmRleC5zY3NzPzk3NDUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQge307Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/index.scss\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_require__("./src/index.js");
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.scss");
/******/ 	
/******/ })()
;