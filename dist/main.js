/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

eval("const Game = __webpack_require__(/*! ./scripts/game.js */ \"./src/scripts/game.js\");\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const canvasEl = document.getElementById('game-canvas');\n  const game = new Game(canvasEl);\n  game.start();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsSUFBSSxHQUFHQyxtQkFBTyxDQUFDLGdEQUFELENBQXBCOztBQUVBQyxRQUFRLENBQUNDLGdCQUFULENBQTBCLGtCQUExQixFQUE4QyxNQUFNO0VBQ2hELE1BQU1DLFFBQVEsR0FBR0YsUUFBUSxDQUFDRyxjQUFULENBQXdCLGFBQXhCLENBQWpCO0VBQ0EsTUFBTUMsSUFBSSxHQUFHLElBQUlOLElBQUosQ0FBU0ksUUFBVCxDQUFiO0VBQ0FFLElBQUksQ0FBQ0MsS0FBTDtBQUVILENBTEQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYWtlLW1hbi1uZWFyLXlvdS8uL3NyYy9pbmRleC5qcz9iNjM1Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEdhbWUgPSByZXF1aXJlKFwiLi9zY3JpcHRzL2dhbWUuanNcIik7XG5cbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCAoKSA9PiB7XG4gICAgY29uc3QgY2FudmFzRWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZ2FtZS1jYW52YXMnKTtcbiAgICBjb25zdCBnYW1lID0gbmV3IEdhbWUoY2FudmFzRWwpO1xuICAgIGdhbWUuc3RhcnQoKTsgICAgXG4gICAgXG59KTtcbiJdLCJuYW1lcyI6WyJHYW1lIiwicmVxdWlyZSIsImRvY3VtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsImNhbnZhc0VsIiwiZ2V0RWxlbWVudEJ5SWQiLCJnYW1lIiwic3RhcnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/scripts/TileMap.js":
/*!********************************!*\
  !*** ./src/scripts/TileMap.js ***!
  \********************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("const Cakeman = __webpack_require__(/*! ./cakeman.js */ \"./src/scripts/cakeman.js\");\n\nconst Ghost = __webpack_require__(/*! ./ghost.js */ \"./src/scripts/ghost.js\");\n\nconst MovingDirection = __webpack_require__(/*! ./movingDirections.js */ \"./src/scripts/movingDirections.js\");\n\nfunction TileMap(tileSize) {\n  // I used MDN Web Documents Square TileMaps Statis Implementation. \n  // https://developer.mozilla.org/en-US/docs/Games/Techniques/Tilemaps/Square_tilemaps_implementation:_Static_maps\n  this.tileSize = tileSize;\n  this.cakeman = new Image();\n  this.cakeman.src = \"../images/cakemanClosed.png\";\n  this.wall = new Image();\n  this.wall.src = \"../images/wall.png\";\n  this.dot = new Image();\n  this.dot.src = \"../images/dot.png\"; // 1 wall\n  // 0 dots\n  // 2 empty black\n  // 7 cakeman\n  // 3 ghost red\n  // 4 ghost blue\n\n  this.tiles = [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]];\n}\n\nTileMap.prototype.setCanvas = function setCanvas(canvas) {\n  canvas.width = this.tiles[0].length * this.tileSize;\n  canvas.height = this.tiles.length * this.tileSize;\n};\n\nTileMap.prototype.draw = function (ctx) {\n  for (let row = 0; row < this.tiles.length; row++) {\n    for (let column = 0; column < this.tiles[row].length; column++) {\n      let tile = this.tiles[row][column];\n      if (tile === 1) this.drawWall(ctx, column, row, this.tileSize);else if (tile === 0) this.drawDot(ctx, column, row, this.tileSize);else {\n        this.drawEmpty(ctx, column, row, this.tileSize);\n      }\n      ctx.strokeStyle = \"yellow\";\n      ctx.strokeRect(column * this.tileSize, row * this.tileSize, this.tileSize, this.tileSize);\n    }\n  }\n};\n\nTileMap.prototype.drawDot = function (ctx, column, row, size) {\n  ctx.drawImage(this.dot, column * this.tileSize, row * this.tileSize, size, size);\n};\n\nTileMap.prototype.drawWall = function (ctx, column, row, size) {\n  ctx.drawImage(this.wall, column * this.tileSize, row * this.tileSize, size, size);\n};\n\nTileMap.prototype.drawEmpty = function (ctx, column, row, size) {\n  ctx.fillStyle = \"black\";\n  ctx.fillRect(column * this.tileSize, row * this.tileSize, size, size);\n};\n\nTileMap.prototype.getCakeman = function () {\n  for (let row = 0; row < this.tiles.length; row++) {\n    for (let column = 0; column < this.tiles[row].length; column++) {\n      let tile = this.tiles[row][column];\n\n      if (tile === 7) {\n        this.tiles[row][column] = 0;\n        let cakeMan = new Cakeman({\n          position: [column * this.tileSize, row * this.tileSize],\n          size: this.tileSize,\n          tileMap: this\n        });\n        return cakeMan;\n      }\n    }\n  }\n};\n\nTileMap.prototype.getGhost = function () {\n  for (let row = 0; row < this.tiles.length; row++) {\n    for (let column = 0; column < this.tiles[row].length; column++) {\n      let tile = this.tiles[row][column];\n\n      if (tile === 3) {\n        this.tiles[row][column] = 0;\n        let ghost = new Ghost({\n          position: [column * this.tileSize, row * this.tileSize],\n          size: this.tileSize,\n          tileMap: this,\n          id: 3\n        });\n        return ghost;\n      } else if (tile === 4) {\n        this.tiles[row][column] = 0;\n        let ghost = new Ghost({\n          position: [column * this.tileSize, row * this.tileSize],\n          size: this.tileSize,\n          tileMap: this,\n          id: 4\n        });\n        return ghost;\n      }\n    }\n  }\n};\n\nTileMap.prototype.didCollidedWithEnv = function (x, y, direction) {\n  if (typeof direction === null) return;\n\n  if (Number.isInteger(x / this.tileSize) && Number.isInteger(y / this.tileSize)) {\n    let column = 0;\n    let row = 0;\n    let nextColumn = 0;\n    let nextRow = 0;\n\n    switch (direction) {\n      case MovingDirection.right:\n        nextColumn = x + this.tileSize;\n        column = nextColumn / this.tileSize;\n        row = y / this.tileSize;\n        break;\n\n      case MovingDirection.left:\n        nextColumn = x - this.tileSize;\n        column = nextColumn / this.tileSize;\n        row = y / this.tileSize;\n        break;\n\n      case MovingDirection.up:\n        nextRow = y - this.tileSize;\n        row = nextRow / this.tileSize;\n        column = x / this.tileSize;\n        break;\n\n      case MovingDirection.down:\n        nextRow = y + this.tileSize;\n        row = nextRow / this.tileSize;\n        column = x / this.tileSize;\n        break;\n    }\n\n    const tile = this.tiles[row][column];\n    if (tile === 1) return true;\n  }\n\n  return false;\n};\n\nTileMap.prototype.removeDot = function removeDot(x, y) {\n  const row = y / this.tileSize;\n  const column = x / this.tileSize;\n\n  if (Number.isInteger(row) && Number.isInteger(column)) {\n    if (this.tiles[row][column] === 0) {\n      this.tiles[row][column] = 2;\n      return true;\n    }\n  }\n\n  return false;\n};\n\nmodule.exports = TileMap;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc2NyaXB0cy9UaWxlTWFwLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLE9BQU8sR0FBR0MsbUJBQU8sQ0FBQyw4Q0FBRCxDQUF2Qjs7QUFDQSxNQUFNQyxLQUFLLEdBQUdELG1CQUFPLENBQUMsMENBQUQsQ0FBckI7O0FBRUEsTUFBTUUsZUFBZSxHQUFHRixtQkFBTyxDQUFDLGdFQUFELENBQS9COztBQUVBLFNBQVNHLE9BQVQsQ0FBa0JDLFFBQWxCLEVBQTRCO0VBRXhCO0VBQ0E7RUFFQSxLQUFLQSxRQUFMLEdBQWdCQSxRQUFoQjtFQUVBLEtBQUtDLE9BQUwsR0FBZSxJQUFJQyxLQUFKLEVBQWY7RUFDQSxLQUFLRCxPQUFMLENBQWFFLEdBQWIsR0FBbUIsNkJBQW5CO0VBRUEsS0FBS0MsSUFBTCxHQUFZLElBQUlGLEtBQUosRUFBWjtFQUNBLEtBQUtFLElBQUwsQ0FBVUQsR0FBVixHQUFnQixvQkFBaEI7RUFFQSxLQUFLRSxHQUFMLEdBQVcsSUFBSUgsS0FBSixFQUFYO0VBQ0EsS0FBS0csR0FBTCxDQUFTRixHQUFULEdBQWUsbUJBQWYsQ0Fkd0IsQ0FnQnhCO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTs7RUFFQSxLQUFLRyxLQUFMLEdBQWEsQ0FDVCxDQUFDLENBQUQsRUFBRyxDQUFILEVBQUssQ0FBTCxFQUFPLENBQVAsRUFBUyxDQUFULEVBQVcsQ0FBWCxFQUFhLENBQWIsRUFBZSxDQUFmLEVBQWlCLENBQWpCLEVBQW1CLENBQW5CLEVBQXFCLENBQXJCLEVBQXVCLENBQXZCLEVBQXlCLENBQXpCLEVBQTJCLENBQTNCLEVBQTZCLENBQTdCLEVBQStCLENBQS9CLEVBQWlDLENBQWpDLEVBQW1DLENBQW5DLEVBQXFDLENBQXJDLEVBQXVDLENBQXZDLEVBQXlDLENBQXpDLEVBQTJDLENBQTNDLEVBQTZDLENBQTdDLEVBQStDLENBQS9DLEVBQWlELENBQWpELEVBQW1ELENBQW5ELEVBQXFELENBQXJELEVBQXVELENBQXZELENBRFMsRUFFVCxDQUFDLENBQUQsRUFBRyxDQUFILEVBQUssQ0FBTCxFQUFPLENBQVAsRUFBUyxDQUFULEVBQVcsQ0FBWCxFQUFhLENBQWIsRUFBZSxDQUFmLEVBQWlCLENBQWpCLEVBQW1CLENBQW5CLEVBQXFCLENBQXJCLEVBQXVCLENBQXZCLEVBQXlCLENBQXpCLEVBQTJCLENBQTNCLEVBQTZCLENBQTdCLEVBQStCLENBQS9CLEVBQWlDLENBQWpDLEVBQW1DLENBQW5DLEVBQXFDLENBQXJDLEVBQXVDLENBQXZDLEVBQXlDLENBQXpDLEVBQTJDLENBQTNDLEVBQTZDLENBQTdDLEVBQStDLENBQS9DLEVBQWlELENBQWpELEVBQW1ELENBQW5ELEVBQXFELENBQXJELEVBQXVELENBQXZELENBRlMsRUFHVCxDQUFDLENBQUQsRUFBRyxDQUFILEVBQUssQ0FBTCxFQUFPLENBQVAsRUFBUyxDQUFULEVBQVcsQ0FBWCxFQUFhLENBQWIsRUFBZSxDQUFmLEVBQWlCLENBQWpCLEVBQW1CLENBQW5CLEVBQXFCLENBQXJCLEVBQXVCLENBQXZCLEVBQXlCLENBQXpCLEVBQTJCLENBQTNCLEVBQTZCLENBQTdCLEVBQStCLENBQS9CLEVBQWlDLENBQWpDLEVBQW1DLENBQW5DLEVBQXFDLENBQXJDLEVBQXVDLENBQXZDLEVBQXlDLENBQXpDLEVBQTJDLENBQTNDLEVBQTZDLENBQTdDLEVBQStDLENBQS9DLEVBQWlELENBQWpELEVBQW1ELENBQW5ELEVBQXFELENBQXJELEVBQXVELENBQXZELENBSFMsRUFJVCxDQUFDLENBQUQsRUFBRyxDQUFILEVBQUssQ0FBTCxFQUFPLENBQVAsRUFBUyxDQUFULEVBQVcsQ0FBWCxFQUFhLENBQWIsRUFBZSxDQUFmLEVBQWlCLENBQWpCLEVBQW1CLENBQW5CLEVBQXFCLENBQXJCLEVBQXVCLENBQXZCLEVBQXlCLENBQXpCLEVBQTJCLENBQTNCLEVBQTZCLENBQTdCLEVBQStCLENBQS9CLEVBQWlDLENBQWpDLEVBQW1DLENBQW5DLEVBQXFDLENBQXJDLEVBQXVDLENBQXZDLEVBQXlDLENBQXpDLEVBQTJDLENBQTNDLEVBQTZDLENBQTdDLEVBQStDLENBQS9DLEVBQWlELENBQWpELEVBQW1ELENBQW5ELEVBQXFELENBQXJELEVBQXVELENBQXZELENBSlMsRUFLVCxDQUFDLENBQUQsRUFBRyxDQUFILEVBQUssQ0FBTCxFQUFPLENBQVAsRUFBUyxDQUFULEVBQVcsQ0FBWCxFQUFhLENBQWIsRUFBZSxDQUFmLEVBQWlCLENBQWpCLEVBQW1CLENBQW5CLEVBQXFCLENBQXJCLEVBQXVCLENBQXZCLEVBQXlCLENBQXpCLEVBQTJCLENBQTNCLEVBQTZCLENBQTdCLEVBQStCLENBQS9CLEVBQWlDLENBQWpDLEVBQW1DLENBQW5DLEVBQXFDLENBQXJDLEVBQXVDLENBQXZDLEVBQXlDLENBQXpDLEVBQTJDLENBQTNDLEVBQTZDLENBQTdDLEVBQStDLENBQS9DLEVBQWlELENBQWpELEVBQW1ELENBQW5ELEVBQXFELENBQXJELEVBQXVELENBQXZELENBTFMsRUFNVCxDQUFDLENBQUQsRUFBRyxDQUFILEVBQUssQ0FBTCxFQUFPLENBQVAsRUFBUyxDQUFULEVBQVcsQ0FBWCxFQUFhLENBQWIsRUFBZSxDQUFmLEVBQWlCLENBQWpCLEVBQW1CLENBQW5CLEVBQXFCLENBQXJCLEVBQXVCLENBQXZCLEVBQXlCLENBQXpCLEVBQTJCLENBQTNCLEVBQTZCLENBQTdCLEVBQStCLENBQS9CLEVBQWlDLENBQWpDLEVBQW1DLENBQW5DLEVBQXFDLENBQXJDLEVBQXVDLENBQXZDLEVBQXlDLENBQXpDLEVBQTJDLENBQTNDLEVBQTZDLENBQTdDLEVBQStDLENBQS9DLEVBQWlELENBQWpELEVBQW1ELENBQW5ELEVBQXFELENBQXJELEVBQXVELENBQXZELENBTlMsRUFPVCxDQUFDLENBQUQsRUFBRyxDQUFILEVBQUssQ0FBTCxFQUFPLENBQVAsRUFBUyxDQUFULEVBQVcsQ0FBWCxFQUFhLENBQWIsRUFBZSxDQUFmLEVBQWlCLENBQWpCLEVBQW1CLENBQW5CLEVBQXFCLENBQXJCLEVBQXVCLENBQXZCLEVBQXlCLENBQXpCLEVBQTJCLENBQTNCLEVBQTZCLENBQTdCLEVBQStCLENBQS9CLEVBQWlDLENBQWpDLEVBQW1DLENBQW5DLEVBQXFDLENBQXJDLEVBQXVDLENBQXZDLEVBQXlDLENBQXpDLEVBQTJDLENBQTNDLEVBQTZDLENBQTdDLEVBQStDLENBQS9DLEVBQWlELENBQWpELEVBQW1ELENBQW5ELEVBQXFELENBQXJELEVBQXVELENBQXZELENBUFMsRUFRVCxDQUFDLENBQUQsRUFBRyxDQUFILEVBQUssQ0FBTCxFQUFPLENBQVAsRUFBUyxDQUFULEVBQVcsQ0FBWCxFQUFhLENBQWIsRUFBZSxDQUFmLEVBQWlCLENBQWpCLEVBQW1CLENBQW5CLEVBQXFCLENBQXJCLEVBQXVCLENBQXZCLEVBQXlCLENBQXpCLEVBQTJCLENBQTNCLEVBQTZCLENBQTdCLEVBQStCLENBQS9CLEVBQWlDLENBQWpDLEVBQW1DLENBQW5DLEVBQXFDLENBQXJDLEVBQXVDLENBQXZDLEVBQXlDLENBQXpDLEVBQTJDLENBQTNDLEVBQTZDLENBQTdDLEVBQStDLENBQS9DLEVBQWlELENBQWpELEVBQW1ELENBQW5ELEVBQXFELENBQXJELEVBQXVELENBQXZELENBUlMsRUFTVCxDQUFDLENBQUQsRUFBRyxDQUFILEVBQUssQ0FBTCxFQUFPLENBQVAsRUFBUyxDQUFULEVBQVcsQ0FBWCxFQUFhLENBQWIsRUFBZSxDQUFmLEVBQWlCLENBQWpCLEVBQW1CLENBQW5CLEVBQXFCLENBQXJCLEVBQXVCLENBQXZCLEVBQXlCLENBQXpCLEVBQTJCLENBQTNCLEVBQTZCLENBQTdCLEVBQStCLENBQS9CLEVBQWlDLENBQWpDLEVBQW1DLENBQW5DLEVBQXFDLENBQXJDLEVBQXVDLENBQXZDLEVBQXlDLENBQXpDLEVBQTJDLENBQTNDLEVBQTZDLENBQTdDLEVBQStDLENBQS9DLEVBQWlELENBQWpELEVBQW1ELENBQW5ELEVBQXFELENBQXJELEVBQXVELENBQXZELENBVFMsRUFVVCxDQUFDLENBQUQsRUFBRyxDQUFILEVBQUssQ0FBTCxFQUFPLENBQVAsRUFBUyxDQUFULEVBQVcsQ0FBWCxFQUFhLENBQWIsRUFBZSxDQUFmLEVBQWlCLENBQWpCLEVBQW1CLENBQW5CLEVBQXFCLENBQXJCLEVBQXVCLENBQXZCLEVBQXlCLENBQXpCLEVBQTJCLENBQTNCLEVBQTZCLENBQTdCLEVBQStCLENBQS9CLEVBQWlDLENBQWpDLEVBQW1DLENBQW5DLEVBQXFDLENBQXJDLEVBQXVDLENBQXZDLEVBQXlDLENBQXpDLEVBQTJDLENBQTNDLEVBQTZDLENBQTdDLEVBQStDLENBQS9DLEVBQWlELENBQWpELEVBQW1ELENBQW5ELEVBQXFELENBQXJELEVBQXVELENBQXZELENBVlMsRUFXVCxDQUFDLENBQUQsRUFBRyxDQUFILEVBQUssQ0FBTCxFQUFPLENBQVAsRUFBUyxDQUFULEVBQVcsQ0FBWCxFQUFhLENBQWIsRUFBZSxDQUFmLEVBQWlCLENBQWpCLEVBQW1CLENBQW5CLEVBQXFCLENBQXJCLEVBQXVCLENBQXZCLEVBQXlCLENBQXpCLEVBQTJCLENBQTNCLEVBQTZCLENBQTdCLEVBQStCLENBQS9CLEVBQWlDLENBQWpDLEVBQW1DLENBQW5DLEVBQXFDLENBQXJDLEVBQXVDLENBQXZDLEVBQXlDLENBQXpDLEVBQTJDLENBQTNDLEVBQTZDLENBQTdDLEVBQStDLENBQS9DLEVBQWlELENBQWpELEVBQW1ELENBQW5ELEVBQXFELENBQXJELEVBQXVELENBQXZELENBWFMsRUFZVCxDQUFDLENBQUQsRUFBRyxDQUFILEVBQUssQ0FBTCxFQUFPLENBQVAsRUFBUyxDQUFULEVBQVcsQ0FBWCxFQUFhLENBQWIsRUFBZSxDQUFmLEVBQWlCLENBQWpCLEVBQW1CLENBQW5CLEVBQXFCLENBQXJCLEVBQXVCLENBQXZCLEVBQXlCLENBQXpCLEVBQTJCLENBQTNCLEVBQTZCLENBQTdCLEVBQStCLENBQS9CLEVBQWlDLENBQWpDLEVBQW1DLENBQW5DLEVBQXFDLENBQXJDLEVBQXVDLENBQXZDLEVBQXlDLENBQXpDLEVBQTJDLENBQTNDLEVBQTZDLENBQTdDLEVBQStDLENBQS9DLEVBQWlELENBQWpELEVBQW1ELENBQW5ELEVBQXFELENBQXJELEVBQXVELENBQXZELENBWlMsRUFhVCxDQUFDLENBQUQsRUFBRyxDQUFILEVBQUssQ0FBTCxFQUFPLENBQVAsRUFBUyxDQUFULEVBQVcsQ0FBWCxFQUFhLENBQWIsRUFBZSxDQUFmLEVBQWlCLENBQWpCLEVBQW1CLENBQW5CLEVBQXFCLENBQXJCLEVBQXVCLENBQXZCLEVBQXlCLENBQXpCLEVBQTJCLENBQTNCLEVBQTZCLENBQTdCLEVBQStCLENBQS9CLEVBQWlDLENBQWpDLEVBQW1DLENBQW5DLEVBQXFDLENBQXJDLEVBQXVDLENBQXZDLEVBQXlDLENBQXpDLEVBQTJDLENBQTNDLEVBQTZDLENBQTdDLEVBQStDLENBQS9DLEVBQWlELENBQWpELEVBQW1ELENBQW5ELEVBQXFELENBQXJELEVBQXVELENBQXZELENBYlMsRUFjVCxDQUFDLENBQUQsRUFBRyxDQUFILEVBQUssQ0FBTCxFQUFPLENBQVAsRUFBUyxDQUFULEVBQVcsQ0FBWCxFQUFhLENBQWIsRUFBZSxDQUFmLEVBQWlCLENBQWpCLEVBQW1CLENBQW5CLEVBQXFCLENBQXJCLEVBQXVCLENBQXZCLEVBQXlCLENBQXpCLEVBQTJCLENBQTNCLEVBQTZCLENBQTdCLEVBQStCLENBQS9CLEVBQWlDLENBQWpDLEVBQW1DLENBQW5DLEVBQXFDLENBQXJDLEVBQXVDLENBQXZDLEVBQXlDLENBQXpDLEVBQTJDLENBQTNDLEVBQTZDLENBQTdDLEVBQStDLENBQS9DLEVBQWlELENBQWpELEVBQW1ELENBQW5ELEVBQXFELENBQXJELEVBQXVELENBQXZELENBZFMsRUFlVCxDQUFDLENBQUQsRUFBRyxDQUFILEVBQUssQ0FBTCxFQUFPLENBQVAsRUFBUyxDQUFULEVBQVcsQ0FBWCxFQUFhLENBQWIsRUFBZSxDQUFmLEVBQWlCLENBQWpCLEVBQW1CLENBQW5CLEVBQXFCLENBQXJCLEVBQXVCLENBQXZCLEVBQXlCLENBQXpCLEVBQTJCLENBQTNCLEVBQTZCLENBQTdCLEVBQStCLENBQS9CLEVBQWlDLENBQWpDLEVBQW1DLENBQW5DLEVBQXFDLENBQXJDLEVBQXVDLENBQXZDLEVBQXlDLENBQXpDLEVBQTJDLENBQTNDLEVBQTZDLENBQTdDLEVBQStDLENBQS9DLEVBQWlELENBQWpELEVBQW1ELENBQW5ELEVBQXFELENBQXJELEVBQXVELENBQXZELENBZlMsRUFnQlQsQ0FBQyxDQUFELEVBQUcsQ0FBSCxFQUFLLENBQUwsRUFBTyxDQUFQLEVBQVMsQ0FBVCxFQUFXLENBQVgsRUFBYSxDQUFiLEVBQWUsQ0FBZixFQUFpQixDQUFqQixFQUFtQixDQUFuQixFQUFxQixDQUFyQixFQUF1QixDQUF2QixFQUF5QixDQUF6QixFQUEyQixDQUEzQixFQUE2QixDQUE3QixFQUErQixDQUEvQixFQUFpQyxDQUFqQyxFQUFtQyxDQUFuQyxFQUFxQyxDQUFyQyxFQUF1QyxDQUF2QyxFQUF5QyxDQUF6QyxFQUEyQyxDQUEzQyxFQUE2QyxDQUE3QyxFQUErQyxDQUEvQyxFQUFpRCxDQUFqRCxFQUFtRCxDQUFuRCxFQUFxRCxDQUFyRCxFQUF1RCxDQUF2RCxDQWhCUyxFQWlCVCxDQUFDLENBQUQsRUFBRyxDQUFILEVBQUssQ0FBTCxFQUFPLENBQVAsRUFBUyxDQUFULEVBQVcsQ0FBWCxFQUFhLENBQWIsRUFBZSxDQUFmLEVBQWlCLENBQWpCLEVBQW1CLENBQW5CLEVBQXFCLENBQXJCLEVBQXVCLENBQXZCLEVBQXlCLENBQXpCLEVBQTJCLENBQTNCLEVBQTZCLENBQTdCLEVBQStCLENBQS9CLEVBQWlDLENBQWpDLEVBQW1DLENBQW5DLEVBQXFDLENBQXJDLEVBQXVDLENBQXZDLEVBQXlDLENBQXpDLEVBQTJDLENBQTNDLEVBQTZDLENBQTdDLEVBQStDLENBQS9DLEVBQWlELENBQWpELEVBQW1ELENBQW5ELEVBQXFELENBQXJELEVBQXVELENBQXZELENBakJTLENBQWI7QUFtQkg7O0FBRURQLE9BQU8sQ0FBQ1EsU0FBUixDQUFrQkMsU0FBbEIsR0FBOEIsU0FBU0EsU0FBVCxDQUFtQkMsTUFBbkIsRUFBMkI7RUFDckRBLE1BQU0sQ0FBQ0MsS0FBUCxHQUFlLEtBQUtKLEtBQUwsQ0FBVyxDQUFYLEVBQWNLLE1BQWQsR0FBdUIsS0FBS1gsUUFBM0M7RUFDQVMsTUFBTSxDQUFDRyxNQUFQLEdBQWdCLEtBQUtOLEtBQUwsQ0FBV0ssTUFBWCxHQUFvQixLQUFLWCxRQUF6QztBQUNILENBSEQ7O0FBS0FELE9BQU8sQ0FBQ1EsU0FBUixDQUFrQk0sSUFBbEIsR0FBeUIsVUFBU0MsR0FBVCxFQUFjO0VBQ25DLEtBQUksSUFBSUMsR0FBRyxHQUFDLENBQVosRUFBZUEsR0FBRyxHQUFDLEtBQUtULEtBQUwsQ0FBV0ssTUFBOUIsRUFBc0NJLEdBQUcsRUFBekMsRUFBNkM7SUFDekMsS0FBSSxJQUFJQyxNQUFNLEdBQUMsQ0FBZixFQUFrQkEsTUFBTSxHQUFDLEtBQUtWLEtBQUwsQ0FBV1MsR0FBWCxFQUFnQkosTUFBekMsRUFBaURLLE1BQU0sRUFBdkQsRUFBMkQ7TUFDdkQsSUFBSUMsSUFBSSxHQUFHLEtBQUtYLEtBQUwsQ0FBV1MsR0FBWCxFQUFnQkMsTUFBaEIsQ0FBWDtNQUNBLElBQUdDLElBQUksS0FBSyxDQUFaLEVBQWUsS0FBS0MsUUFBTCxDQUFjSixHQUFkLEVBQW1CRSxNQUFuQixFQUEyQkQsR0FBM0IsRUFBZ0MsS0FBS2YsUUFBckMsRUFBZixLQUNLLElBQUdpQixJQUFJLEtBQUssQ0FBWixFQUFlLEtBQUtFLE9BQUwsQ0FBYUwsR0FBYixFQUFrQkUsTUFBbEIsRUFBMEJELEdBQTFCLEVBQStCLEtBQUtmLFFBQXBDLEVBQWYsS0FDQTtRQUNELEtBQUtvQixTQUFMLENBQWVOLEdBQWYsRUFBb0JFLE1BQXBCLEVBQTRCRCxHQUE1QixFQUFpQyxLQUFLZixRQUF0QztNQUNIO01BRURjLEdBQUcsQ0FBQ08sV0FBSixHQUFrQixRQUFsQjtNQUNBUCxHQUFHLENBQUNRLFVBQUosQ0FDSU4sTUFBTSxHQUFDLEtBQUtoQixRQURoQixFQUVJZSxHQUFHLEdBQUcsS0FBS2YsUUFGZixFQUdJLEtBQUtBLFFBSFQsRUFJSSxLQUFLQSxRQUpUO0lBTUg7RUFDSjtBQUNKLENBbkJEOztBQXFCQUQsT0FBTyxDQUFDUSxTQUFSLENBQWtCWSxPQUFsQixHQUE0QixVQUFTTCxHQUFULEVBQWNFLE1BQWQsRUFBc0JELEdBQXRCLEVBQTJCUSxJQUEzQixFQUFpQztFQUN6RFQsR0FBRyxDQUFDVSxTQUFKLENBQ0ksS0FBS25CLEdBRFQsRUFFSVcsTUFBTSxHQUFHLEtBQUtoQixRQUZsQixFQUdJZSxHQUFHLEdBQUcsS0FBS2YsUUFIZixFQUlJdUIsSUFKSixFQUtJQSxJQUxKO0FBT0gsQ0FSRDs7QUFVQXhCLE9BQU8sQ0FBQ1EsU0FBUixDQUFrQlcsUUFBbEIsR0FBNkIsVUFBU0osR0FBVCxFQUFjRSxNQUFkLEVBQXNCRCxHQUF0QixFQUEyQlEsSUFBM0IsRUFBaUM7RUFDMURULEdBQUcsQ0FBQ1UsU0FBSixDQUNJLEtBQUtwQixJQURULEVBRUlZLE1BQU0sR0FBRyxLQUFLaEIsUUFGbEIsRUFHSWUsR0FBRyxHQUFHLEtBQUtmLFFBSGYsRUFJSXVCLElBSkosRUFLSUEsSUFMSjtBQU9ILENBUkQ7O0FBVUF4QixPQUFPLENBQUNRLFNBQVIsQ0FBa0JhLFNBQWxCLEdBQThCLFVBQVNOLEdBQVQsRUFBY0UsTUFBZCxFQUFzQkQsR0FBdEIsRUFBMkJRLElBQTNCLEVBQWlDO0VBQzNEVCxHQUFHLENBQUNXLFNBQUosR0FBZ0IsT0FBaEI7RUFDQVgsR0FBRyxDQUFDWSxRQUFKLENBQWFWLE1BQU0sR0FBRyxLQUFLaEIsUUFBM0IsRUFBcUNlLEdBQUcsR0FBQyxLQUFLZixRQUE5QyxFQUF3RHVCLElBQXhELEVBQThEQSxJQUE5RDtBQUNILENBSEQ7O0FBS0F4QixPQUFPLENBQUNRLFNBQVIsQ0FBa0JvQixVQUFsQixHQUErQixZQUFXO0VBQ3RDLEtBQUksSUFBSVosR0FBRyxHQUFDLENBQVosRUFBZUEsR0FBRyxHQUFDLEtBQUtULEtBQUwsQ0FBV0ssTUFBOUIsRUFBc0NJLEdBQUcsRUFBekMsRUFBNkM7SUFDekMsS0FBSSxJQUFJQyxNQUFNLEdBQUMsQ0FBZixFQUFrQkEsTUFBTSxHQUFDLEtBQUtWLEtBQUwsQ0FBV1MsR0FBWCxFQUFnQkosTUFBekMsRUFBaURLLE1BQU0sRUFBdkQsRUFBMkQ7TUFDdkQsSUFBSUMsSUFBSSxHQUFHLEtBQUtYLEtBQUwsQ0FBV1MsR0FBWCxFQUFnQkMsTUFBaEIsQ0FBWDs7TUFDQSxJQUFHQyxJQUFJLEtBQUssQ0FBWixFQUFlO1FBQ1gsS0FBS1gsS0FBTCxDQUFXUyxHQUFYLEVBQWdCQyxNQUFoQixJQUEwQixDQUExQjtRQUNBLElBQUlZLE9BQU8sR0FBRyxJQUFJakMsT0FBSixDQUFZO1VBQ3RCa0MsUUFBUSxFQUFFLENBQUNiLE1BQU0sR0FBQyxLQUFLaEIsUUFBYixFQUF1QmUsR0FBRyxHQUFDLEtBQUtmLFFBQWhDLENBRFk7VUFFdEJ1QixJQUFJLEVBQUUsS0FBS3ZCLFFBRlc7VUFHdEI4QixPQUFPLEVBQUU7UUFIYSxDQUFaLENBQWQ7UUFNQSxPQUFPRixPQUFQO01BQ0g7SUFDSjtFQUNKO0FBQ0osQ0FoQkQ7O0FBa0JBN0IsT0FBTyxDQUFDUSxTQUFSLENBQWtCd0IsUUFBbEIsR0FBNkIsWUFBVztFQUNwQyxLQUFJLElBQUloQixHQUFHLEdBQUMsQ0FBWixFQUFlQSxHQUFHLEdBQUMsS0FBS1QsS0FBTCxDQUFXSyxNQUE5QixFQUFzQ0ksR0FBRyxFQUF6QyxFQUE2QztJQUN6QyxLQUFJLElBQUlDLE1BQU0sR0FBQyxDQUFmLEVBQWtCQSxNQUFNLEdBQUMsS0FBS1YsS0FBTCxDQUFXUyxHQUFYLEVBQWdCSixNQUF6QyxFQUFpREssTUFBTSxFQUF2RCxFQUEyRDtNQUN2RCxJQUFJQyxJQUFJLEdBQUcsS0FBS1gsS0FBTCxDQUFXUyxHQUFYLEVBQWdCQyxNQUFoQixDQUFYOztNQUNBLElBQUdDLElBQUksS0FBSyxDQUFaLEVBQWU7UUFDWCxLQUFLWCxLQUFMLENBQVdTLEdBQVgsRUFBZ0JDLE1BQWhCLElBQTBCLENBQTFCO1FBQ0EsSUFBSWdCLEtBQUssR0FBRyxJQUFJbkMsS0FBSixDQUFVO1VBQ2xCZ0MsUUFBUSxFQUFFLENBQUNiLE1BQU0sR0FBQyxLQUFLaEIsUUFBYixFQUF1QmUsR0FBRyxHQUFDLEtBQUtmLFFBQWhDLENBRFE7VUFFbEJ1QixJQUFJLEVBQUUsS0FBS3ZCLFFBRk87VUFHbEI4QixPQUFPLEVBQUUsSUFIUztVQUlsQkcsRUFBRSxFQUFFO1FBSmMsQ0FBVixDQUFaO1FBT0EsT0FBT0QsS0FBUDtNQUNILENBVkQsTUFVTyxJQUFHZixJQUFJLEtBQUssQ0FBWixFQUFlO1FBQ2xCLEtBQUtYLEtBQUwsQ0FBV1MsR0FBWCxFQUFnQkMsTUFBaEIsSUFBMEIsQ0FBMUI7UUFDQSxJQUFJZ0IsS0FBSyxHQUFHLElBQUluQyxLQUFKLENBQVU7VUFDbEJnQyxRQUFRLEVBQUUsQ0FBQ2IsTUFBTSxHQUFDLEtBQUtoQixRQUFiLEVBQXVCZSxHQUFHLEdBQUMsS0FBS2YsUUFBaEMsQ0FEUTtVQUVsQnVCLElBQUksRUFBRSxLQUFLdkIsUUFGTztVQUdsQjhCLE9BQU8sRUFBRSxJQUhTO1VBSWxCRyxFQUFFLEVBQUU7UUFKYyxDQUFWLENBQVo7UUFPSixPQUFPRCxLQUFQO01BQ0M7SUFDSjtFQUNKO0FBQ0osQ0EzQkQ7O0FBNkJBakMsT0FBTyxDQUFDUSxTQUFSLENBQWtCMkIsa0JBQWxCLEdBQXVDLFVBQVNDLENBQVQsRUFBWUMsQ0FBWixFQUFlQyxTQUFmLEVBQTBCO0VBQzdELElBQUcsT0FBT0EsU0FBUCxLQUFxQixJQUF4QixFQUE4Qjs7RUFDOUIsSUFBR0MsTUFBTSxDQUFDQyxTQUFQLENBQWlCSixDQUFDLEdBQUMsS0FBS25DLFFBQXhCLEtBQXFDc0MsTUFBTSxDQUFDQyxTQUFQLENBQWlCSCxDQUFDLEdBQUMsS0FBS3BDLFFBQXhCLENBQXhDLEVBQTJFO0lBQ3ZFLElBQUlnQixNQUFNLEdBQUcsQ0FBYjtJQUNBLElBQUlELEdBQUcsR0FBRyxDQUFWO0lBQ0EsSUFBSXlCLFVBQVUsR0FBRyxDQUFqQjtJQUNBLElBQUlDLE9BQU8sR0FBRyxDQUFkOztJQUVBLFFBQU9KLFNBQVA7TUFDSSxLQUFLdkMsZUFBZSxDQUFDNEMsS0FBckI7UUFDSUYsVUFBVSxHQUFHTCxDQUFDLEdBQUcsS0FBS25DLFFBQXRCO1FBQ0FnQixNQUFNLEdBQUd3QixVQUFVLEdBQUcsS0FBS3hDLFFBQTNCO1FBQ0FlLEdBQUcsR0FBR3FCLENBQUMsR0FBRyxLQUFLcEMsUUFBZjtRQUNBOztNQUNKLEtBQUtGLGVBQWUsQ0FBQzZDLElBQXJCO1FBQ0lILFVBQVUsR0FBR0wsQ0FBQyxHQUFHLEtBQUtuQyxRQUF0QjtRQUNBZ0IsTUFBTSxHQUFHd0IsVUFBVSxHQUFHLEtBQUt4QyxRQUEzQjtRQUNBZSxHQUFHLEdBQUdxQixDQUFDLEdBQUcsS0FBS3BDLFFBQWY7UUFDQTs7TUFFSixLQUFLRixlQUFlLENBQUM4QyxFQUFyQjtRQUNJSCxPQUFPLEdBQUdMLENBQUMsR0FBRyxLQUFLcEMsUUFBbkI7UUFDQWUsR0FBRyxHQUFHMEIsT0FBTyxHQUFHLEtBQUt6QyxRQUFyQjtRQUNBZ0IsTUFBTSxHQUFHbUIsQ0FBQyxHQUFHLEtBQUtuQyxRQUFsQjtRQUNBOztNQUNKLEtBQUtGLGVBQWUsQ0FBQytDLElBQXJCO1FBQ0lKLE9BQU8sR0FBR0wsQ0FBQyxHQUFHLEtBQUtwQyxRQUFuQjtRQUNBZSxHQUFHLEdBQUcwQixPQUFPLEdBQUcsS0FBS3pDLFFBQXJCO1FBQ0FnQixNQUFNLEdBQUdtQixDQUFDLEdBQUcsS0FBS25DLFFBQWxCO1FBQ0E7SUFyQlI7O0lBdUJBLE1BQU1pQixJQUFJLEdBQUcsS0FBS1gsS0FBTCxDQUFXUyxHQUFYLEVBQWdCQyxNQUFoQixDQUFiO0lBQ0EsSUFBR0MsSUFBSSxLQUFLLENBQVosRUFBZSxPQUFPLElBQVA7RUFDbEI7O0VBQ0QsT0FBTyxLQUFQO0FBQ0gsQ0FuQ0Q7O0FBcUNBbEIsT0FBTyxDQUFDUSxTQUFSLENBQWtCdUMsU0FBbEIsR0FBOEIsU0FBU0EsU0FBVCxDQUFtQlgsQ0FBbkIsRUFBc0JDLENBQXRCLEVBQXlCO0VBQ25ELE1BQU1yQixHQUFHLEdBQUdxQixDQUFDLEdBQUcsS0FBS3BDLFFBQXJCO0VBQ0EsTUFBTWdCLE1BQU0sR0FBR21CLENBQUMsR0FBRyxLQUFLbkMsUUFBeEI7O0VBRUEsSUFBR3NDLE1BQU0sQ0FBQ0MsU0FBUCxDQUFpQnhCLEdBQWpCLEtBQXlCdUIsTUFBTSxDQUFDQyxTQUFQLENBQWlCdkIsTUFBakIsQ0FBNUIsRUFBc0Q7SUFDbEQsSUFBRyxLQUFLVixLQUFMLENBQVdTLEdBQVgsRUFBZ0JDLE1BQWhCLE1BQTRCLENBQS9CLEVBQWtDO01BQzlCLEtBQUtWLEtBQUwsQ0FBV1MsR0FBWCxFQUFnQkMsTUFBaEIsSUFBMEIsQ0FBMUI7TUFDQSxPQUFPLElBQVA7SUFDSDtFQUNKOztFQUNELE9BQU8sS0FBUDtBQUNILENBWEQ7O0FBYUErQixNQUFNLENBQUNDLE9BQVAsR0FBaUJqRCxPQUFqQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Nha2UtbWFuLW5lYXIteW91Ly4vc3JjL3NjcmlwdHMvVGlsZU1hcC5qcz9hMDU3Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IENha2VtYW4gPSByZXF1aXJlKFwiLi9jYWtlbWFuLmpzXCIpO1xuY29uc3QgR2hvc3QgPSByZXF1aXJlKFwiLi9naG9zdC5qc1wiKTtcblxuY29uc3QgTW92aW5nRGlyZWN0aW9uID0gcmVxdWlyZShcIi4vbW92aW5nRGlyZWN0aW9ucy5qc1wiKTtcblxuZnVuY3Rpb24gVGlsZU1hcCAodGlsZVNpemUpIHtcblxuICAgIC8vIEkgdXNlZCBNRE4gV2ViIERvY3VtZW50cyBTcXVhcmUgVGlsZU1hcHMgU3RhdGlzIEltcGxlbWVudGF0aW9uLiBcbiAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0dhbWVzL1RlY2huaXF1ZXMvVGlsZW1hcHMvU3F1YXJlX3RpbGVtYXBzX2ltcGxlbWVudGF0aW9uOl9TdGF0aWNfbWFwc1xuXG4gICAgdGhpcy50aWxlU2l6ZSA9IHRpbGVTaXplXG5cbiAgICB0aGlzLmNha2VtYW4gPSBuZXcgSW1hZ2UoKTtcbiAgICB0aGlzLmNha2VtYW4uc3JjID0gXCIuLi9pbWFnZXMvY2FrZW1hbkNsb3NlZC5wbmdcIjtcblxuICAgIHRoaXMud2FsbCA9IG5ldyBJbWFnZSgpO1xuICAgIHRoaXMud2FsbC5zcmMgPSBcIi4uL2ltYWdlcy93YWxsLnBuZ1wiO1xuXG4gICAgdGhpcy5kb3QgPSBuZXcgSW1hZ2UoKTtcbiAgICB0aGlzLmRvdC5zcmMgPSBcIi4uL2ltYWdlcy9kb3QucG5nXCI7XG5cbiAgICAvLyAxIHdhbGxcbiAgICAvLyAwIGRvdHNcbiAgICAvLyAyIGVtcHR5IGJsYWNrXG4gICAgLy8gNyBjYWtlbWFuXG4gICAgLy8gMyBnaG9zdCByZWRcbiAgICAvLyA0IGdob3N0IGJsdWVcbiAgICBcbiAgICB0aGlzLnRpbGVzID0gW1xuICAgICAgICBbMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMV0sXG4gICAgICAgIFsxLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwxXSxcbiAgICAgICAgWzEsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDFdLFxuICAgICAgICBbMSwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMV0sXG4gICAgICAgIFsxLDAsMywwLDAsMCwwLDAsMCwwLDcsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwxXSxcbiAgICAgICAgWzEsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDFdLFxuICAgICAgICBbMSwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDEsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMV0sXG4gICAgICAgIFsxLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwxXSxcbiAgICAgICAgWzEsMSwwLDAsMCwxLDAsMCwwLDAsMCwwLDAsMCwxLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDFdLFxuICAgICAgICBbMSwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMV0sXG4gICAgICAgIFsxLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwxXSxcbiAgICAgICAgWzEsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDFdLFxuICAgICAgICBbMSwxLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsNCwwLDAsMCwxLDEsMV0sXG4gICAgICAgIFsxLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwxXSxcbiAgICAgICAgWzEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDFdLFxuICAgICAgICBbMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMV0sXG4gICAgICAgIFsxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxXSxcbiAgICBdO1xufVxuXG5UaWxlTWFwLnByb3RvdHlwZS5zZXRDYW52YXMgPSBmdW5jdGlvbiBzZXRDYW52YXMoY2FudmFzKSB7XG4gICAgY2FudmFzLndpZHRoID0gdGhpcy50aWxlc1swXS5sZW5ndGggKiB0aGlzLnRpbGVTaXplO1xuICAgIGNhbnZhcy5oZWlnaHQgPSB0aGlzLnRpbGVzLmxlbmd0aCAqIHRoaXMudGlsZVNpemU7XG59XG5cblRpbGVNYXAucHJvdG90eXBlLmRyYXcgPSBmdW5jdGlvbihjdHgpIHtcbiAgICBmb3IobGV0IHJvdz0wOyByb3c8dGhpcy50aWxlcy5sZW5ndGg7IHJvdysrKSB7XG4gICAgICAgIGZvcihsZXQgY29sdW1uPTA7IGNvbHVtbjx0aGlzLnRpbGVzW3Jvd10ubGVuZ3RoOyBjb2x1bW4rKykge1xuICAgICAgICAgICAgbGV0IHRpbGUgPSB0aGlzLnRpbGVzW3Jvd11bY29sdW1uXTtcbiAgICAgICAgICAgIGlmKHRpbGUgPT09IDEpIHRoaXMuZHJhd1dhbGwoY3R4LCBjb2x1bW4sIHJvdywgdGhpcy50aWxlU2l6ZSk7XG4gICAgICAgICAgICBlbHNlIGlmKHRpbGUgPT09IDApIHRoaXMuZHJhd0RvdChjdHgsIGNvbHVtbiwgcm93LCB0aGlzLnRpbGVTaXplKTtcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuZHJhd0VtcHR5KGN0eCwgY29sdW1uLCByb3csIHRoaXMudGlsZVNpemUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSBcInllbGxvd1wiO1xuICAgICAgICAgICAgY3R4LnN0cm9rZVJlY3QoXG4gICAgICAgICAgICAgICAgY29sdW1uKnRoaXMudGlsZVNpemUsXG4gICAgICAgICAgICAgICAgcm93ICogdGhpcy50aWxlU2l6ZSxcbiAgICAgICAgICAgICAgICB0aGlzLnRpbGVTaXplLFxuICAgICAgICAgICAgICAgIHRoaXMudGlsZVNpemVcbiAgICAgICAgICAgIClcbiAgICAgICAgfVxuICAgIH1cbn1cblxuVGlsZU1hcC5wcm90b3R5cGUuZHJhd0RvdCA9IGZ1bmN0aW9uKGN0eCwgY29sdW1uLCByb3csIHNpemUpIHtcbiAgICBjdHguZHJhd0ltYWdlKFxuICAgICAgICB0aGlzLmRvdCwgXG4gICAgICAgIGNvbHVtbiAqIHRoaXMudGlsZVNpemUsXG4gICAgICAgIHJvdyAqIHRoaXMudGlsZVNpemUsXG4gICAgICAgIHNpemUsXG4gICAgICAgIHNpemVcbiAgICApO1xufTtcblxuVGlsZU1hcC5wcm90b3R5cGUuZHJhd1dhbGwgPSBmdW5jdGlvbihjdHgsIGNvbHVtbiwgcm93LCBzaXplKSB7XG4gICAgY3R4LmRyYXdJbWFnZShcbiAgICAgICAgdGhpcy53YWxsLCBcbiAgICAgICAgY29sdW1uICogdGhpcy50aWxlU2l6ZSxcbiAgICAgICAgcm93ICogdGhpcy50aWxlU2l6ZSxcbiAgICAgICAgc2l6ZSxcbiAgICAgICAgc2l6ZVxuICAgICk7XG59O1xuXG5UaWxlTWFwLnByb3RvdHlwZS5kcmF3RW1wdHkgPSBmdW5jdGlvbihjdHgsIGNvbHVtbiwgcm93LCBzaXplKSB7XG4gICAgY3R4LmZpbGxTdHlsZSA9IFwiYmxhY2tcIjtcbiAgICBjdHguZmlsbFJlY3QoY29sdW1uICogdGhpcy50aWxlU2l6ZSwgcm93KnRoaXMudGlsZVNpemUsIHNpemUsIHNpemUpO1xufVxuXG5UaWxlTWFwLnByb3RvdHlwZS5nZXRDYWtlbWFuID0gZnVuY3Rpb24oKSB7XG4gICAgZm9yKGxldCByb3c9MDsgcm93PHRoaXMudGlsZXMubGVuZ3RoOyByb3crKykge1xuICAgICAgICBmb3IobGV0IGNvbHVtbj0wOyBjb2x1bW48dGhpcy50aWxlc1tyb3ddLmxlbmd0aDsgY29sdW1uKyspIHtcbiAgICAgICAgICAgIGxldCB0aWxlID0gdGhpcy50aWxlc1tyb3ddW2NvbHVtbl07XG4gICAgICAgICAgICBpZih0aWxlID09PSA3KSB7XG4gICAgICAgICAgICAgICAgdGhpcy50aWxlc1tyb3ddW2NvbHVtbl0gPSAwO1xuICAgICAgICAgICAgICAgIGxldCBjYWtlTWFuID0gbmV3IENha2VtYW4oe1xuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogW2NvbHVtbip0aGlzLnRpbGVTaXplLCByb3cqdGhpcy50aWxlU2l6ZV0sXG4gICAgICAgICAgICAgICAgICAgIHNpemU6IHRoaXMudGlsZVNpemUsXG4gICAgICAgICAgICAgICAgICAgIHRpbGVNYXA6IHRoaXNcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNha2VNYW47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cblRpbGVNYXAucHJvdG90eXBlLmdldEdob3N0ID0gZnVuY3Rpb24oKSB7XG4gICAgZm9yKGxldCByb3c9MDsgcm93PHRoaXMudGlsZXMubGVuZ3RoOyByb3crKykge1xuICAgICAgICBmb3IobGV0IGNvbHVtbj0wOyBjb2x1bW48dGhpcy50aWxlc1tyb3ddLmxlbmd0aDsgY29sdW1uKyspIHtcbiAgICAgICAgICAgIGxldCB0aWxlID0gdGhpcy50aWxlc1tyb3ddW2NvbHVtbl07XG4gICAgICAgICAgICBpZih0aWxlID09PSAzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50aWxlc1tyb3ddW2NvbHVtbl0gPSAwO1xuICAgICAgICAgICAgICAgIGxldCBnaG9zdCA9IG5ldyBHaG9zdCh7XG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBbY29sdW1uKnRoaXMudGlsZVNpemUsIHJvdyp0aGlzLnRpbGVTaXplXSxcbiAgICAgICAgICAgICAgICAgICAgc2l6ZTogdGhpcy50aWxlU2l6ZSxcbiAgICAgICAgICAgICAgICAgICAgdGlsZU1hcDogdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IDNcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdob3N0OyAgICBcbiAgICAgICAgICAgIH0gZWxzZSBpZih0aWxlID09PSA0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy50aWxlc1tyb3ddW2NvbHVtbl0gPSAwO1xuICAgICAgICAgICAgICAgIGxldCBnaG9zdCA9IG5ldyBHaG9zdCh7XG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBbY29sdW1uKnRoaXMudGlsZVNpemUsIHJvdyp0aGlzLnRpbGVTaXplXSxcbiAgICAgICAgICAgICAgICAgICAgc2l6ZTogdGhpcy50aWxlU2l6ZSxcbiAgICAgICAgICAgICAgICAgICAgdGlsZU1hcDogdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IDRcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICByZXR1cm4gZ2hvc3Q7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cblRpbGVNYXAucHJvdG90eXBlLmRpZENvbGxpZGVkV2l0aEVudiA9IGZ1bmN0aW9uKHgsIHksIGRpcmVjdGlvbikge1xuICAgIGlmKHR5cGVvZiBkaXJlY3Rpb24gPT09IG51bGwpIHJldHVybjtcbiAgICBpZihOdW1iZXIuaXNJbnRlZ2VyKHgvdGhpcy50aWxlU2l6ZSkgJiYgTnVtYmVyLmlzSW50ZWdlcih5L3RoaXMudGlsZVNpemUpKSB7XG4gICAgICAgIGxldCBjb2x1bW4gPSAwO1xuICAgICAgICBsZXQgcm93ID0gMDtcbiAgICAgICAgbGV0IG5leHRDb2x1bW4gPSAwO1xuICAgICAgICBsZXQgbmV4dFJvdyA9IDA7XG5cbiAgICAgICAgc3dpdGNoKGRpcmVjdGlvbikge1xuICAgICAgICAgICAgY2FzZSBNb3ZpbmdEaXJlY3Rpb24ucmlnaHQ6XG4gICAgICAgICAgICAgICAgbmV4dENvbHVtbiA9IHggKyB0aGlzLnRpbGVTaXplO1xuICAgICAgICAgICAgICAgIGNvbHVtbiA9IG5leHRDb2x1bW4gLyB0aGlzLnRpbGVTaXplO1xuICAgICAgICAgICAgICAgIHJvdyA9IHkgLyB0aGlzLnRpbGVTaXplO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBNb3ZpbmdEaXJlY3Rpb24ubGVmdDpcbiAgICAgICAgICAgICAgICBuZXh0Q29sdW1uID0geCAtIHRoaXMudGlsZVNpemU7XG4gICAgICAgICAgICAgICAgY29sdW1uID0gbmV4dENvbHVtbiAvIHRoaXMudGlsZVNpemU7XG4gICAgICAgICAgICAgICAgcm93ID0geSAvIHRoaXMudGlsZVNpemU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgTW92aW5nRGlyZWN0aW9uLnVwOlxuICAgICAgICAgICAgICAgIG5leHRSb3cgPSB5IC0gdGhpcy50aWxlU2l6ZTtcbiAgICAgICAgICAgICAgICByb3cgPSBuZXh0Um93IC8gdGhpcy50aWxlU2l6ZTtcbiAgICAgICAgICAgICAgICBjb2x1bW4gPSB4IC8gdGhpcy50aWxlU2l6ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgTW92aW5nRGlyZWN0aW9uLmRvd246XG4gICAgICAgICAgICAgICAgbmV4dFJvdyA9IHkgKyB0aGlzLnRpbGVTaXplO1xuICAgICAgICAgICAgICAgIHJvdyA9IG5leHRSb3cgLyB0aGlzLnRpbGVTaXplO1xuICAgICAgICAgICAgICAgIGNvbHVtbiA9IHggLyB0aGlzLnRpbGVTaXplO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHRpbGUgPSB0aGlzLnRpbGVzW3Jvd11bY29sdW1uXTtcbiAgICAgICAgaWYodGlsZSA9PT0gMSkgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuVGlsZU1hcC5wcm90b3R5cGUucmVtb3ZlRG90ID0gZnVuY3Rpb24gcmVtb3ZlRG90KHgsIHkpIHtcbiAgICBjb25zdCByb3cgPSB5IC8gdGhpcy50aWxlU2l6ZTtcbiAgICBjb25zdCBjb2x1bW4gPSB4IC8gdGhpcy50aWxlU2l6ZTtcblxuICAgIGlmKE51bWJlci5pc0ludGVnZXIocm93KSAmJiBOdW1iZXIuaXNJbnRlZ2VyKGNvbHVtbikpIHtcbiAgICAgICAgaWYodGhpcy50aWxlc1tyb3ddW2NvbHVtbl0gPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMudGlsZXNbcm93XVtjb2x1bW5dID0gMjtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTsgXG59XG5cbm1vZHVsZS5leHBvcnRzID0gVGlsZU1hcDtcblxuIl0sIm5hbWVzIjpbIkNha2VtYW4iLCJyZXF1aXJlIiwiR2hvc3QiLCJNb3ZpbmdEaXJlY3Rpb24iLCJUaWxlTWFwIiwidGlsZVNpemUiLCJjYWtlbWFuIiwiSW1hZ2UiLCJzcmMiLCJ3YWxsIiwiZG90IiwidGlsZXMiLCJwcm90b3R5cGUiLCJzZXRDYW52YXMiLCJjYW52YXMiLCJ3aWR0aCIsImxlbmd0aCIsImhlaWdodCIsImRyYXciLCJjdHgiLCJyb3ciLCJjb2x1bW4iLCJ0aWxlIiwiZHJhd1dhbGwiLCJkcmF3RG90IiwiZHJhd0VtcHR5Iiwic3Ryb2tlU3R5bGUiLCJzdHJva2VSZWN0Iiwic2l6ZSIsImRyYXdJbWFnZSIsImZpbGxTdHlsZSIsImZpbGxSZWN0IiwiZ2V0Q2FrZW1hbiIsImNha2VNYW4iLCJwb3NpdGlvbiIsInRpbGVNYXAiLCJnZXRHaG9zdCIsImdob3N0IiwiaWQiLCJkaWRDb2xsaWRlZFdpdGhFbnYiLCJ4IiwieSIsImRpcmVjdGlvbiIsIk51bWJlciIsImlzSW50ZWdlciIsIm5leHRDb2x1bW4iLCJuZXh0Um93IiwicmlnaHQiLCJsZWZ0IiwidXAiLCJkb3duIiwicmVtb3ZlRG90IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/scripts/TileMap.js\n");

/***/ }),

/***/ "./src/scripts/cakeman.js":
/*!********************************!*\
  !*** ./src/scripts/cakeman.js ***!
  \********************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("const MovingDirection = __webpack_require__(/*! ./movingDirections.js */ \"./src/scripts/movingDirections.js\");\n\nfunction Cakeman(options) {\n  this.x = options.position[0];\n  this.y = options.position[1];\n  this.tileSize = options.size;\n  this.velocity = 2;\n  this.tileMap = options.tileMap;\n  this.currentMovingDirection = null;\n  this.requestedMovingDirection = null;\n  this.animateTimer = null;\n  this.animateDefault = 10;\n  this.rotation = {\n    right: 0,\n    down: 1,\n    left: 2,\n    up: 3\n  };\n  this.cakemanRotation = this.rotation.right;\n  this.hasMoved = false;\n  document.addEventListener(\"keydown\", this.keydown.bind(this));\n  this.loadCakemanImages();\n}\n\nCakeman.prototype.draw = function (ctx) {\n  this.move();\n  this.animate();\n  this.removeDot(); // I used Tutorial on how to rotate a single image\n  // https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Transformations\n\n  let size = this.tileSize / 2;\n  ctx.save();\n  ctx.translate(this.x + size, this.y + size);\n  ctx.rotate(this.cakemanRotation * 90 * Math.PI / 180);\n  ctx.drawImage(this.cakemanImages[this.cakemanImageIndex], -size, -size, this.tileSize, this.tileSize);\n  ctx.restore(); // ctx.drawImage(\n  //     this.cakemanImages[this.cakemanImageIndex],\n  //     this.x,\n  //     this.y,\n  //     this.tileSize,\n  //     this.tileSize\n  // )\n};\n\nCakeman.prototype.move = function () {\n  if (this.currentMovingDirection !== this.requestedMovingDirection) {\n    if (Number.isInteger(this.x / this.tileSize) && Number.isInteger(this.y / this.tileSize)) {\n      if (!this.tileMap.didCollidedWithEnv(this.x, this.y, this.requestedMovingDirection)) this.currentMovingDirection = this.requestedMovingDirection;\n    }\n  }\n\n  if (this.tileMap.didCollidedWithEnv(this.x, this.y, this.currentMovingDirection)) {\n    this.animateTimer = null;\n    this.cakemanImageIndex = 0;\n    return;\n  } else if (this.currentMovingDirection && !this.animateTimer) {\n    this.animateTimer = this.animateDefault;\n  }\n\n  switch (this.currentMovingDirection) {\n    case MovingDirection.up:\n      this.y -= this.velocity;\n      this.cakemanRotation = this.rotation.up;\n      break;\n\n    case MovingDirection.down:\n      this.y += this.velocity;\n      this.cakemanRotation = this.rotation.down;\n      break;\n\n    case MovingDirection.left:\n      this.x -= this.velocity;\n      this.cakemanRotation = this.rotation.left;\n      break;\n\n    case MovingDirection.right:\n      this.x += this.velocity;\n      this.cakemanRotation = this.rotation.right;\n      break;\n  }\n};\n\nCakeman.prototype.loadCakemanImages = function () {\n  const cakemanImg1 = new Image();\n  cakemanImg1.src = \"../images/cakemanClosed.png\";\n  const cakemanImg2 = new Image();\n  cakemanImg2.src = \"../images/cakemanHalfOpen.png\";\n  const cakemanImg3 = new Image();\n  cakemanImg3.src = \"../images/cakemanFullOpen.png\";\n  const cakemanImg4 = new Image();\n  cakemanImg4.src = \"../images/cakemanHalfOpen.png\";\n  this.cakemanImages = [cakemanImg1, cakemanImg2, cakemanImg3, cakemanImg4];\n  this.cakemanImageIndex = 0;\n};\n\nCakeman.prototype.keydown = function (event) {\n  const arr = [38, 40, 37, 39];\n  if (arr.includes(event.keyCode)) this.hasMoved = true; // up key\n\n  if (event.keyCode === 38) {\n    if (this.currentMovingDirection === MovingDirection.down) {\n      this.currentMovingDirection = MovingDirection.up;\n    }\n\n    this.requestedMovingDirection = MovingDirection.up;\n  } // down\n\n\n  if (event.keyCode === 40) {\n    if (this.currentMovingDirection === MovingDirection.up) {\n      this.currentMovingDirection = MovingDirection.down;\n    }\n\n    this.requestedMovingDirection = MovingDirection.down;\n  } // 37 left\n\n\n  if (event.keyCode === 37) {\n    if (this.currentMovingDirection === MovingDirection.right) {\n      this.currentMovingDirection = MovingDirection.left;\n    }\n\n    this.requestedMovingDirection = MovingDirection.left;\n  } // 39 right\n\n\n  if (event.keyCode === 39) {\n    if (this.currentMovingDirection === MovingDirection.left) {\n      this.currentMovingDirection = MovingDirection.right;\n    }\n\n    this.requestedMovingDirection = MovingDirection.right;\n  }\n};\n\nCakeman.prototype.animate = function animate() {\n  if (!this.animateTimer) {\n    return;\n  }\n\n  this.animateTimer -= 1;\n\n  if (this.animateTimer === 0) {\n    this.animateTimer = this.animateDefault;\n    this.cakemanImageIndex += 1;\n\n    if (this.cakemanImageIndex === this.cakemanImages.length) {\n      this.cakemanImageIndex = 0;\n    }\n  }\n};\n\nCakeman.prototype.removeDot = function removeDot() {\n  if (this.tileMap.removeDot(this.x, this.y)) {}\n};\n\nmodule.exports = Cakeman;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/cakeman.js\n");

/***/ }),

/***/ "./src/scripts/game.js":
/*!*****************************!*\
  !*** ./src/scripts/game.js ***!
  \*****************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("const TileMap = __webpack_require__(/*! ./TileMap */ \"./src/scripts/TileMap.js\");\n\nconst Cakeman = __webpack_require__(/*! ./cakeman.js */ \"./src/scripts/cakeman.js\");\n\nfunction Game(canvas) {\n  this.canvas = canvas;\n  this.ctx = this.canvas.getContext(\"2d\");\n  this.tileSize = 32;\n  this.velocity = 2;\n  this.tileMap = new TileMap(this.tileSize);\n  this.cakeman = this.tileMap.getCakeman();\n  this.ghost = this.tileMap.getGhost();\n  this.blueGhost = this.tileMap.getGhost();\n  this.setCanvasSize();\n}\n\n;\n\nGame.prototype.setCanvasSize = function setCanvasSize() {\n  this.tileMap.setCanvas(this.canvas);\n};\n\nGame.prototype.start = function () {\n  setInterval(this.gameIter.bind(this), 1000 / 50);\n};\n\nGame.prototype.gameIter = function () {\n  // console.log(`cakeman.x: ${this.cakeman.x}, ${this.cakeman.y} ghost x: ${this.ghost.x}, ${this.ghost.y}`);\n  if (!this.isLost()) {\n    this.tileMap.draw(this.ctx);\n    this.cakeman.draw(this.ctx);\n    this.ghost.draw(this.ctx, this.pause(), this.cakeman);\n    this.blueGhost.draw(this.ctx, this.pause(), this.cakeman);\n  } else return;\n};\n\nGame.prototype.pause = function pause() {\n  return !this.cakeman.hasMoved;\n};\n\nGame.prototype.isLost = function isLost() {\n  // 2d Detection Collision on mozilla\n  // https://developer.mozilla.org/en-US/docs/Games/Techniques/2D_collision_detection\n  if (this.cakeman.x < this.ghost.x + 16 && this.cakeman.x + 16 > this.ghost.x && this.cakeman.y < this.ghost.y + 16 && 16 + this.cakeman.y > this.ghost.y || this.cakeman.x < this.blueGhost.x + 16 && this.cakeman.x + 16 > this.blueGhost.x && this.cakeman.y < this.blueGhost.y + 16 && 16 + this.cakeman.y > this.blueGhost.y) {\n    return true;\n  }\n\n  return false;\n};\n\nmodule.exports = Game;\nwindow.Game = Game;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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R0FBaUIsS0FBS2IsU0FBTCxDQUFlYSxDQUFmLEdBQW1CLEVBRnZDLElBR0csS0FBSyxLQUFLakIsT0FBTCxDQUFhaUIsQ0FBbEIsR0FBc0IsS0FBS2IsU0FBTCxDQUFlYSxDQVR6QyxFQVVFO0lBQ0UsT0FBTyxJQUFQO0VBQ0g7O0VBQ0QsT0FBTyxLQUFQO0FBQ0gsQ0FsQkQ7O0FBb0JBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUIxQixJQUFqQjtBQUVBMkIsTUFBTSxDQUFDM0IsSUFBUCxHQUFjQSxJQUFkIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2FrZS1tYW4tbmVhci15b3UvLi9zcmMvc2NyaXB0cy9nYW1lLmpzP2NkYzAiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgVGlsZU1hcCA9IHJlcXVpcmUoXCIuL1RpbGVNYXBcIik7XG5jb25zdCBDYWtlbWFuID0gcmVxdWlyZShcIi4vY2FrZW1hbi5qc1wiKTtcblxuZnVuY3Rpb24gR2FtZShjYW52YXMpIHtcbiAgICB0aGlzLmNhbnZhcyA9IGNhbnZhcztcbiAgICB0aGlzLmN0eCA9IHRoaXMuY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcbiAgICB0aGlzLnRpbGVTaXplID0gMzI7XG4gICAgdGhpcy52ZWxvY2l0eSA9IDI7XG4gICAgdGhpcy50aWxlTWFwID0gbmV3IFRpbGVNYXAodGhpcy50aWxlU2l6ZSk7XG4gICAgdGhpcy5jYWtlbWFuID0gdGhpcy50aWxlTWFwLmdldENha2VtYW4oKTtcbiAgICB0aGlzLmdob3N0ID0gdGhpcy50aWxlTWFwLmdldEdob3N0KCk7XG4gICAgdGhpcy5ibHVlR2hvc3QgPSB0aGlzLnRpbGVNYXAuZ2V0R2hvc3QoKTsgXG5cbiAgICB0aGlzLnNldENhbnZhc1NpemUoKTtcbn07XG5cblxuR2FtZS5wcm90b3R5cGUuc2V0Q2FudmFzU2l6ZSA9IGZ1bmN0aW9uIHNldENhbnZhc1NpemUoKSB7XG4gICAgdGhpcy50aWxlTWFwLnNldENhbnZhcyh0aGlzLmNhbnZhcyk7XG59XG5cbkdhbWUucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24oKSB7XG4gICAgc2V0SW50ZXJ2YWwodGhpcy5nYW1lSXRlci5iaW5kKHRoaXMpLCAxMDAwLzUwKTtcbn1cblxuR2FtZS5wcm90b3R5cGUuZ2FtZUl0ZXIgPSBmdW5jdGlvbigpIHtcbiAgICAvLyBjb25zb2xlLmxvZyhgY2FrZW1hbi54OiAke3RoaXMuY2FrZW1hbi54fSwgJHt0aGlzLmNha2VtYW4ueX0gZ2hvc3QgeDogJHt0aGlzLmdob3N0Lnh9LCAke3RoaXMuZ2hvc3QueX1gKTtcbiAgICBpZighdGhpcy5pc0xvc3QoKSkge1xuXG4gICAgICAgIHRoaXMudGlsZU1hcC5kcmF3KHRoaXMuY3R4KTtcbiAgICAgICAgdGhpcy5jYWtlbWFuLmRyYXcodGhpcy5jdHgpO1xuICAgICAgICB0aGlzLmdob3N0LmRyYXcodGhpcy5jdHgsIHRoaXMucGF1c2UoKSwgdGhpcy5jYWtlbWFuKTtcbiAgICAgICAgdGhpcy5ibHVlR2hvc3QuZHJhdyh0aGlzLmN0eCwgdGhpcy5wYXVzZSgpLCB0aGlzLmNha2VtYW4pO1xuICAgIH1cbiAgICBlbHNlIHJldHVybjtcbn07XG5cbkdhbWUucHJvdG90eXBlLnBhdXNlID0gZnVuY3Rpb24gcGF1c2UoKSB7XG4gICAgcmV0dXJuICF0aGlzLmNha2VtYW4uaGFzTW92ZWQ7XG59XG5cbkdhbWUucHJvdG90eXBlLmlzTG9zdCA9IGZ1bmN0aW9uIGlzTG9zdCgpIHtcbiAgICAvLyAyZCBEZXRlY3Rpb24gQ29sbGlzaW9uIG9uIG1vemlsbGFcbiAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0dhbWVzL1RlY2huaXF1ZXMvMkRfY29sbGlzaW9uX2RldGVjdGlvblxuICAgIFxuICAgIGlmKFxuICAgICh0aGlzLmNha2VtYW4ueCA8IHRoaXMuZ2hvc3QueCArIDE2ICYmXG4gICAgdGhpcy5jYWtlbWFuLnggKyAxNiA+IHRoaXMuZ2hvc3QueCAmJlxuICAgIHRoaXMuY2FrZW1hbi55IDwgdGhpcy5naG9zdC55ICsgMTYgJiZcbiAgICAxNiArIHRoaXMuY2FrZW1hbi55ID4gdGhpcy5naG9zdC55KSB8fFxuXG4gICAgKHRoaXMuY2FrZW1hbi54IDwgdGhpcy5ibHVlR2hvc3QueCArIDE2ICYmXG4gICAgICAgIHRoaXMuY2FrZW1hbi54ICsgMTYgPiB0aGlzLmJsdWVHaG9zdC54ICYmXG4gICAgICAgIHRoaXMuY2FrZW1hbi55IDwgdGhpcy5ibHVlR2hvc3QueSArIDE2ICYmXG4gICAgICAgIDE2ICsgdGhpcy5jYWtlbWFuLnkgPiB0aGlzLmJsdWVHaG9zdC55KVxuICAgICkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEdhbWU7XG5cbndpbmRvdy5HYW1lID0gR2FtZTtcbiJdLCJuYW1lcyI6WyJUaWxlTWFwIiwicmVxdWlyZSIsIkNha2VtYW4iLCJHYW1lIiwiY2FudmFzIiwiY3R4IiwiZ2V0Q29udGV4dCIsInRpbGVTaXplIiwidmVsb2NpdHkiLCJ0aWxlTWFwIiwiY2FrZW1hbiIsImdldENha2VtYW4iLCJnaG9zdCIsImdldEdob3N0IiwiYmx1ZUdob3N0Iiwic2V0Q2FudmFzU2l6ZSIsInByb3RvdHlwZSIsInNldENhbnZhcyIsInN0YXJ0Iiwic2V0SW50ZXJ2YWwiLCJnYW1lSXRlciIsImJpbmQiLCJpc0xvc3QiLCJkcmF3IiwicGF1c2UiLCJoYXNNb3ZlZCIsIngiLCJ5IiwibW9kdWxlIiwiZXhwb3J0cyIsIndpbmRvdyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/scripts/game.js\n");

/***/ }),

/***/ "./src/scripts/ghost.js":
/*!******************************!*\
  !*** ./src/scripts/ghost.js ***!
  \******************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("const MovingDirection = __webpack_require__(/*! ./movingDirections.js */ \"./src/scripts/movingDirections.js\");\n\nconst Util = __webpack_require__(/*! ./utils.js */ \"./src/scripts/utils.js\");\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n;\n\nfunction Ghost(options) {\n  this.x = options.position[0];\n  this.y = options.position[1];\n  this.tileSize = options.size;\n  this.velocity = 2;\n  this.tileMap = options.tileMap;\n  this.id = options.id;\n  this.movingDirection = getRandomInt(1, 4); // initial random is fine\n\n  this.loadGhostImage();\n}\n\nGhost.prototype.draw = function draw(ctx, pause, cakeman) {\n  if (!pause) {\n    this.move(cakeman);\n    this.changeDirection(cakeman);\n  } // if(this.tileMap.didCollidedWithEnv(this.x, this.y, this.movingDirection)) this.changeDirection();\n\n\n  ctx.drawImage(this.ghostImage, this.x, this.y, this.tileSize, this.tileSize);\n};\n\nGhost.prototype.move = function move(cakeman) {\n  if (!this.tileMap.didCollidedWithEnv(this.x, this.y, this.movingDirection)) {\n    switch (this.movingDirection) {\n      case MovingDirection.up:\n        this.y -= this.velocity;\n        break;\n\n      case MovingDirection.down:\n        this.y += this.velocity;\n        break;\n\n      case MovingDirection.left:\n        this.x -= this.velocity;\n        break;\n\n      case MovingDirection.right:\n        this.x += this.velocity;\n        break;\n    }\n  }\n};\n\nGhost.prototype.changeDirection = function changeDirection(cakeman) {\n  let newMoveDirection = null;\n\n  if (this.id !== 3) {\n    if (getRandomInt(1, 4) < 3) {\n      newMoveDirection = Util.findDirectionForGhost(this, cakeman);\n    } else {\n      newMoveDirection = getRandomInt(1, 4);\n    }\n  } else {\n    newMoveDirection = Util.findDirectionForGhost(this, cakeman);\n  }\n\n  if (this.movingDirection !== newMoveDirection) {\n    if (Number.isInteger(this.x / this.tileSize) && Number.isInteger(this.y / this.tileSize)) {\n      if (!this.tileMap.didCollidedWithEnv(this.x, this.y, newMoveDirection)) {\n        this.movingDirection = newMoveDirection;\n      } else this.movingDirection = getRandomInt(1, 4);\n    }\n  }\n};\n\nGhost.prototype.loadGhostImage = function draw() {\n  this.ghostImage = new Image();\n\n  if (this.id === 3) {\n    this.ghostImage.src = \"../images/redGhost.png\";\n  } else if (this.id === 4) {\n    this.ghostImage.src = \"../images/blueGhost.png\";\n  }\n};\n\nmodule.exports = Ghost;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/ghost.js\n");

/***/ }),

/***/ "./src/scripts/movingDirections.js":
/*!*****************************************!*\
  !*** ./src/scripts/movingDirections.js ***!
  \*****************************************/
/***/ (function(module) {

eval("const MovingDirection = {\n  up: 4,\n  // avoid using 0\n  down: 1,\n  left: 2,\n  right: 3\n};\nmodule.exports = MovingDirection;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc2NyaXB0cy9tb3ZpbmdEaXJlY3Rpb25zLmpzLmpzIiwibmFtZXMiOlsiTW92aW5nRGlyZWN0aW9uIiwidXAiLCJkb3duIiwibGVmdCIsInJpZ2h0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2FrZS1tYW4tbmVhci15b3UvLi9zcmMvc2NyaXB0cy9tb3ZpbmdEaXJlY3Rpb25zLmpzPzRjYmMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgTW92aW5nRGlyZWN0aW9uID0ge1xuICAgIHVwOiA0LCAvLyBhdm9pZCB1c2luZyAwXG4gICAgZG93bjogMSxcbiAgICBsZWZ0OiAyLFxuICAgIHJpZ2h0OiAzLFxuICB9O1xuICBcbm1vZHVsZS5leHBvcnRzID0gTW92aW5nRGlyZWN0aW9uOyJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsZUFBZSxHQUFHO0VBQ3BCQyxFQUFFLEVBQUUsQ0FEZ0I7RUFDYjtFQUNQQyxJQUFJLEVBQUUsQ0FGYztFQUdwQkMsSUFBSSxFQUFFLENBSGM7RUFJcEJDLEtBQUssRUFBRTtBQUphLENBQXhCO0FBT0FDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQk4sZUFBakIifQ==\n//# sourceURL=webpack-internal:///./src/scripts/movingDirections.js\n");

/***/ }),

/***/ "./src/scripts/utils.js":
/*!******************************!*\
  !*** ./src/scripts/utils.js ***!
  \******************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("const MovingDirection = __webpack_require__(/*! ./movingDirections.js */ \"./src/scripts/movingDirections.js\");\n\nconst Util = {\n  inherits(childClass, parentClass) {\n    function Surrogate() {}\n\n    ;\n    Surrogate.prototype = parentClass.prototype;\n    childClass.prototype = new Surrogate();\n    childClass.prototype.constructor = childClass;\n  },\n\n  randomVec(length) {\n    const deg = 2 * Math.PI * Math.random();\n    return Util.scale([Math.sin(deg), Math.cos(deg)], length);\n  },\n\n  // Scale the length of a vector by the given amount.\n  scale(vec, m) {\n    return [vec[0] * m, vec[1] * m];\n  },\n\n  dist(pos1, pos2) {\n    return Math.sqrt(Math.pow(pos1[0] - pos2[0], 2) + Math.pow(pos1[1] - pos2[1], 2));\n  },\n\n  findDirectionForGhost(ghost, cakeman) {\n    let absX = Math.abs(ghost.x - cakeman.x);\n    let absY = Math.abs(ghost.y - cakeman.y);\n\n    if (absX >= absY) {\n      // x direction move, left or rigth\n      return ghost.x < cakeman.x ? MovingDirection.right : MovingDirection.left;\n    } else {\n      // up or down move\n      return ghost.y < cakeman.y ? MovingDirection.down : MovingDirection.up;\n    }\n  }\n\n};\nmodule.exports = Util;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc2NyaXB0cy91dGlscy5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxlQUFlLEdBQUdDLG1CQUFPLENBQUMsZ0VBQUQsQ0FBL0I7O0FBRUEsTUFBTUMsSUFBSSxHQUFHO0VBQ1RDLFFBQVEsQ0FBQ0MsVUFBRCxFQUFhQyxXQUFiLEVBQTBCO0lBQzlCLFNBQVNDLFNBQVQsR0FBcUIsQ0FBRTs7SUFBQTtJQUN2QkEsU0FBUyxDQUFDQyxTQUFWLEdBQXNCRixXQUFXLENBQUNFLFNBQWxDO0lBQ0FILFVBQVUsQ0FBQ0csU0FBWCxHQUF1QixJQUFJRCxTQUFKLEVBQXZCO0lBQ0FGLFVBQVUsQ0FBQ0csU0FBWCxDQUFxQkMsV0FBckIsR0FBbUNKLFVBQW5DO0VBQ0gsQ0FOUTs7RUFRVEssU0FBUyxDQUFDQyxNQUFELEVBQVM7SUFDZCxNQUFNQyxHQUFHLEdBQUcsSUFBSUMsSUFBSSxDQUFDQyxFQUFULEdBQWNELElBQUksQ0FBQ0UsTUFBTCxFQUExQjtJQUNBLE9BQU9aLElBQUksQ0FBQ2EsS0FBTCxDQUFXLENBQUNILElBQUksQ0FBQ0ksR0FBTCxDQUFTTCxHQUFULENBQUQsRUFBZ0JDLElBQUksQ0FBQ0ssR0FBTCxDQUFTTixHQUFULENBQWhCLENBQVgsRUFBMkNELE1BQTNDLENBQVA7RUFDSCxDQVhROztFQVlQO0VBQ0ZLLEtBQUssQ0FBQ0csR0FBRCxFQUFNQyxDQUFOLEVBQVM7SUFDVixPQUFPLENBQUNELEdBQUcsQ0FBQyxDQUFELENBQUgsR0FBU0MsQ0FBVixFQUFhRCxHQUFHLENBQUMsQ0FBRCxDQUFILEdBQVNDLENBQXRCLENBQVA7RUFDSCxDQWZROztFQWlCVEMsSUFBSSxDQUFDQyxJQUFELEVBQU9DLElBQVAsRUFBYTtJQUNiLE9BQU9WLElBQUksQ0FBQ1csSUFBTCxDQUNMWCxJQUFJLENBQUNZLEdBQUwsQ0FBU0gsSUFBSSxDQUFDLENBQUQsQ0FBSixHQUFVQyxJQUFJLENBQUMsQ0FBRCxDQUF2QixFQUE0QixDQUE1QixJQUFpQ1YsSUFBSSxDQUFDWSxHQUFMLENBQVNILElBQUksQ0FBQyxDQUFELENBQUosR0FBVUMsSUFBSSxDQUFDLENBQUQsQ0FBdkIsRUFBNEIsQ0FBNUIsQ0FENUIsQ0FBUDtFQUdILENBckJROztFQXVCVEcscUJBQXFCLENBQUNDLEtBQUQsRUFBUUMsT0FBUixFQUFpQjtJQUNsQyxJQUFJQyxJQUFJLEdBQUdoQixJQUFJLENBQUNpQixHQUFMLENBQVNILEtBQUssQ0FBQ0ksQ0FBTixHQUFVSCxPQUFPLENBQUNHLENBQTNCLENBQVg7SUFDQSxJQUFJQyxJQUFJLEdBQUduQixJQUFJLENBQUNpQixHQUFMLENBQVNILEtBQUssQ0FBQ00sQ0FBTixHQUFVTCxPQUFPLENBQUNLLENBQTNCLENBQVg7O0lBQ0EsSUFBR0osSUFBSSxJQUFJRyxJQUFYLEVBQWlCO01BQ2I7TUFDQSxPQUFPTCxLQUFLLENBQUNJLENBQU4sR0FBVUgsT0FBTyxDQUFDRyxDQUFsQixHQUFzQjlCLGVBQWUsQ0FBQ2lDLEtBQXRDLEdBQThDakMsZUFBZSxDQUFDa0MsSUFBckU7SUFDSCxDQUhELE1BR087TUFDSDtNQUNBLE9BQU9SLEtBQUssQ0FBQ00sQ0FBTixHQUFVTCxPQUFPLENBQUNLLENBQWxCLEdBQXNCaEMsZUFBZSxDQUFDbUMsSUFBdEMsR0FBNkNuQyxlQUFlLENBQUNvQyxFQUFwRTtJQUNIO0VBQ0o7O0FBakNRLENBQWI7QUFvQ0FDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQnBDLElBQWpCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2FrZS1tYW4tbmVhci15b3UvLi9zcmMvc2NyaXB0cy91dGlscy5qcz9kYjEzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IE1vdmluZ0RpcmVjdGlvbiA9IHJlcXVpcmUoXCIuL21vdmluZ0RpcmVjdGlvbnMuanNcIik7XG5cbmNvbnN0IFV0aWwgPSB7XG4gICAgaW5oZXJpdHMoY2hpbGRDbGFzcywgcGFyZW50Q2xhc3MpIHtcbiAgICAgICAgZnVuY3Rpb24gU3Vycm9nYXRlKCkge307XG4gICAgICAgIFN1cnJvZ2F0ZS5wcm90b3R5cGUgPSBwYXJlbnRDbGFzcy5wcm90b3R5cGU7XG4gICAgICAgIGNoaWxkQ2xhc3MucHJvdG90eXBlID0gbmV3IFN1cnJvZ2F0ZSgpO1xuICAgICAgICBjaGlsZENsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGNoaWxkQ2xhc3M7XG4gICAgfSxcblxuICAgIHJhbmRvbVZlYyhsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgZGVnID0gMiAqIE1hdGguUEkgKiBNYXRoLnJhbmRvbSgpO1xuICAgICAgICByZXR1cm4gVXRpbC5zY2FsZShbTWF0aC5zaW4oZGVnKSwgTWF0aC5jb3MoZGVnKV0sIGxlbmd0aCk7XG4gICAgfSxcbiAgICAgIC8vIFNjYWxlIHRoZSBsZW5ndGggb2YgYSB2ZWN0b3IgYnkgdGhlIGdpdmVuIGFtb3VudC5cbiAgICBzY2FsZSh2ZWMsIG0pIHtcbiAgICAgICAgcmV0dXJuIFt2ZWNbMF0gKiBtLCB2ZWNbMV0gKiBtXTtcbiAgICB9LFxuXG4gICAgZGlzdChwb3MxLCBwb3MyKSB7XG4gICAgICAgIHJldHVybiBNYXRoLnNxcnQoXG4gICAgICAgICAgTWF0aC5wb3cocG9zMVswXSAtIHBvczJbMF0sIDIpICsgTWF0aC5wb3cocG9zMVsxXSAtIHBvczJbMV0sIDIpXG4gICAgICAgICk7XG4gICAgfSxcbiAgICBcbiAgICBmaW5kRGlyZWN0aW9uRm9yR2hvc3QoZ2hvc3QsIGNha2VtYW4pIHtcbiAgICAgICAgbGV0IGFic1ggPSBNYXRoLmFicyhnaG9zdC54IC0gY2FrZW1hbi54KTtcbiAgICAgICAgbGV0IGFic1kgPSBNYXRoLmFicyhnaG9zdC55IC0gY2FrZW1hbi55KTtcbiAgICAgICAgaWYoYWJzWCA+PSBhYnNZKSB7XG4gICAgICAgICAgICAvLyB4IGRpcmVjdGlvbiBtb3ZlLCBsZWZ0IG9yIHJpZ3RoXG4gICAgICAgICAgICByZXR1cm4gZ2hvc3QueCA8IGNha2VtYW4ueCA/IE1vdmluZ0RpcmVjdGlvbi5yaWdodCA6IE1vdmluZ0RpcmVjdGlvbi5sZWZ0OyAgXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyB1cCBvciBkb3duIG1vdmVcbiAgICAgICAgICAgIHJldHVybiBnaG9zdC55IDwgY2FrZW1hbi55ID8gTW92aW5nRGlyZWN0aW9uLmRvd24gOiBNb3ZpbmdEaXJlY3Rpb24udXA7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gVXRpbDsiXSwibmFtZXMiOlsiTW92aW5nRGlyZWN0aW9uIiwicmVxdWlyZSIsIlV0aWwiLCJpbmhlcml0cyIsImNoaWxkQ2xhc3MiLCJwYXJlbnRDbGFzcyIsIlN1cnJvZ2F0ZSIsInByb3RvdHlwZSIsImNvbnN0cnVjdG9yIiwicmFuZG9tVmVjIiwibGVuZ3RoIiwiZGVnIiwiTWF0aCIsIlBJIiwicmFuZG9tIiwic2NhbGUiLCJzaW4iLCJjb3MiLCJ2ZWMiLCJtIiwiZGlzdCIsInBvczEiLCJwb3MyIiwic3FydCIsInBvdyIsImZpbmREaXJlY3Rpb25Gb3JHaG9zdCIsImdob3N0IiwiY2FrZW1hbiIsImFic1giLCJhYnMiLCJ4IiwiYWJzWSIsInkiLCJyaWdodCIsImxlZnQiLCJkb3duIiwidXAiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/scripts/utils.js\n");

/***/ }),

/***/ "./src/index.scss":
/*!************************!*\
  !*** ./src/index.scss ***!
  \************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguc2Nzcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYWtlLW1hbi1uZWFyLXlvdS8uL3NyYy9pbmRleC5zY3NzPzk3NDUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQge307Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/index.scss\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_require__("./src/index.js");
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.scss");
/******/ 	
/******/ })()
;